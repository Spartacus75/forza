[{"D:\\ReactProject\\BETA\\forza\\src\\index.js":"1","D:\\ReactProject\\BETA\\forza\\src\\App.js":"2","D:\\ReactProject\\BETA\\forza\\src\\reportWebVitals.js":"3","D:\\ReactProject\\BETA\\forza\\src\\Components\\Login.js":"4","D:\\ReactProject\\BETA\\forza\\src\\Components\\Main.js":"5","D:\\ReactProject\\BETA\\forza\\src\\Components\\MyAppBar.js":"6","D:\\ReactProject\\BETA\\forza\\src\\Assets\\AppBar.js":"7","D:\\ReactProject\\BETA\\forza\\src\\firebase.js":"8","D:\\ReactProject\\BETA\\forza\\src\\Context\\AuthContext.js":"9","D:\\ReactProject\\BETA\\forza\\src\\Components\\ForgotPassword.js":"10","D:\\ReactProject\\BETA\\forza\\src\\Components\\Filter.js":"11","D:\\ReactProject\\BETA\\forza\\src\\Components\\List.js":"12","D:\\ReactProject\\BETA\\forza\\src\\Assets\\Button.js":"13","D:\\ReactProject\\BETA\\forza\\src\\Assets\\Dialog.js":"14","D:\\ReactProject\\BETA\\forza\\src\\Assets\\Select.js":"15","D:\\ReactProject\\BETA\\forza\\src\\data.js":"16","D:\\ReactProject\\BETA\\forza\\src\\Assets\\DatePicker.js":"17","D:\\ReactProject\\BETA\\forza\\src\\Assets\\SmallAlert.js":"18","D:\\ReactProject\\BETA\\forza\\src\\functions.js":"19","D:\\ReactProject\\BETA\\forza\\src\\Assets\\DialogForChange\\DialogQtty.js":"20","D:\\ReactProject\\BETA\\forza\\src\\Assets\\PrivateRoute.js":"21","D:\\ReactProject\\BETA\\forza\\src\\Components\\Dashboard.js":"22"},{"size":502,"mtime":1610029769913,"results":"23","hashOfConfig":"24"},{"size":1736,"mtime":1611762427816,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":499162500000,"results":"26","hashOfConfig":"24"},{"size":2558,"mtime":1610036625134,"results":"27","hashOfConfig":"24"},{"size":55790,"mtime":1611740651878,"results":"28","hashOfConfig":"24"},{"size":1979,"mtime":1611677293501,"results":"29","hashOfConfig":"24"},{"size":5943,"mtime":1611762707804,"results":"30","hashOfConfig":"24"},{"size":534,"mtime":1610450706929,"results":"31","hashOfConfig":"24"},{"size":3092,"mtime":1610035323667,"results":"32","hashOfConfig":"24"},{"size":2022,"mtime":1610039487154,"results":"33","hashOfConfig":"24"},{"size":5488,"mtime":1611094992718,"results":"34","hashOfConfig":"24"},{"size":18349,"mtime":1611738473766,"results":"35","hashOfConfig":"24"},{"size":533,"mtime":1610312572122,"results":"36","hashOfConfig":"24"},{"size":7065,"mtime":1610459000126,"results":"37","hashOfConfig":"24"},{"size":1500,"mtime":1610798626892,"results":"38","hashOfConfig":"24"},{"size":2799,"mtime":1611071400516,"results":"39","hashOfConfig":"24"},{"size":1114,"mtime":1610918691554,"results":"40","hashOfConfig":"24"},{"size":1681,"mtime":1610457181398,"results":"41","hashOfConfig":"24"},{"size":1943,"mtime":1611488311253,"results":"42","hashOfConfig":"24"},{"size":1387,"mtime":1610816544587,"results":"43","hashOfConfig":"24"},{"size":430,"mtime":1611610384024,"results":"44","hashOfConfig":"24"},{"size":7966,"mtime":1611955853185,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"25t81l",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"48"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\ReactProject\\BETA\\forza\\src\\index.js",[],["100","101"],"D:\\ReactProject\\BETA\\forza\\src\\App.js",[],"D:\\ReactProject\\BETA\\forza\\src\\reportWebVitals.js",[],"D:\\ReactProject\\BETA\\forza\\src\\Components\\Login.js",[],"D:\\ReactProject\\BETA\\forza\\src\\Components\\Main.js",["102","103","104","105"],"import {useState, useEffect} from 'react'\r\nimport {useAuth} from '../Context/AuthContext'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Filter from './Filter'\r\nimport List from './List'\r\nimport AddProjectButton from '../Assets/Button'\r\nimport AddProjectDialog from '../Assets/Dialog'\r\nimport {\r\n  countries,\r\n  dataQtty,\r\n  dataGeneration,\r\n  dataBlades,\r\n  dataTowers,\r\n  dataTM,\r\n  dataSM,\r\n  dataPriorities,\r\n  dataRoadSurvey,\r\n  dataLOGBudget,\r\n  dataGate,\r\n  tenderStatus\r\n} from '../data.js'\r\nimport moment from 'moment'\r\nimport firebase from '../firebase.js'\r\nimport SmallAlert from '../Assets/SmallAlert'\r\nimport {findWithAttr, filterArray} from '../functions.js'\r\nimport ModalQtty from '../Assets/DialogForChange/DialogQtty'\r\nimport ModalBlade from '../Assets/DialogForChange/DialogQtty'\r\nimport ModalTower from '../Assets/DialogForChange/DialogQtty'\r\nimport ModalGeneration from '../Assets/DialogForChange/DialogQtty'\r\nimport ModalPriority from '../Assets/DialogForChange/DialogQtty'\r\nimport ModalCountry from '../Assets/DialogForChange/DialogQtty'\r\nimport ModalTM from '../Assets/DialogForChange/DialogQtty'\r\nimport ModalSM from '../Assets/DialogForChange/DialogQtty'\r\nimport ModalRoad from '../Assets/DialogForChange/DialogQtty'\r\nimport ModalLOGBudget from '../Assets/DialogForChange/DialogQtty'\r\nimport ModalGate from '../Assets/DialogForChange/DialogQtty'\r\nimport ModalStatus from '../Assets/DialogForChange/DialogQtty'\r\nimport ModalClient from '../Assets/DialogForChange/DialogQtty'\r\nimport ModalComments from '../Assets/DialogForChange/DialogQtty'\r\nimport ModalKO from '../Assets/DialogForChange/DialogQtty'\r\nimport ModalOI from '../Assets/DialogForChange/DialogQtty'\r\nimport SelectQtty from '../Assets/Select'\r\nimport DatePicker from '../Assets/DatePicker'\r\n\r\n\r\n\r\nexport default function Main(){\r\n\r\nconst styles = {\r\n  alert:{\r\n    backgroundColor: '#f6b3b3'\r\n  }\r\n}\r\n\r\nconst {currentUser} = useAuth()\r\n\r\nconst [open, setOpen] = useState(false)\r\nconst [valueProject, setValueProject] = useState(Date.now())\r\nconst [valueCountry, setValueCountry] = useState('France')\r\nconst [valueQtty, setValueQtty] = useState(3)\r\nconst [valueGeneration, setValueGeneration] = useState('Delta')\r\nconst [valueBlade, setValueBlade] = useState('N117')\r\nconst [valueTower, setValueTower] = useState('TS91')\r\nconst [valueTM, setValueTM] = useState('')\r\nconst [valueSM, setValueSM] = useState('')\r\nconst [valueClient, setValueClient] = useState('')\r\nconst [valuePriority, setValuePriority] = useState('Medium')\r\nconst [valueOrderIntake, setValueOrderIntake] = useState(Date.now())\r\nconst [valueKO, setValueKO] = useState(Date.now())\r\nconst [valueRS, setValueRS] = useState('')\r\nconst [valueLOG, setValueLOG] = useState('')\r\nconst [valueGate, setValueGate] = useState('')\r\nconst [valueStatus, setValueStatus] = useState('')\r\nconst [valueComments, setValueComments] = useState('')\r\nconst [valueValidation, setValueValidation] =useState(false)\r\nconst [valueFirestore, setvalueFirestore] = useState([\r\n\r\n{\r\n  priority: '',\r\n  blade: '',\r\n  tower: '',\r\n  generation:'' ,\r\n  tm: '',\r\n  sm:'' ,\r\n  roadSurvey:'' ,\r\n  logBudget:'' ,\r\n  gate:'' ,\r\n  status:'' ,\r\n  project: '',\r\n  client:'' ,\r\n  country: ''\r\n\r\n}\r\n\r\n])\r\nconst [valueModalQtty, setValueModalQtty] = useState(false)\r\nconst [valueQttyChange, setValueQttyChange] = useState(1)\r\nconst [valueProjectChange, setValueProjectChange] = useState('')\r\nconst [valueModalBlade, setValueModalBlade] = useState(false)\r\nconst [valueBladeChange, setValueBladeChange] = useState('')\r\nconst [valueModalTower, setValueModalTower] = useState(false)\r\nconst [valueTowerChange, setValueTowerChange] = useState('')\r\nconst [valueModalGeneration, setValueModalGeneration] = useState(false)\r\nconst [valueGenerationChange, setValueGenerationChange] = useState('')\r\nconst [valueModalPriority, setValueModalPriority] = useState(false)\r\nconst [valuePriorityChange, setValuePriorityChange] = useState('')\r\nconst [valueModalCountry, setValueModalCountry] = useState(false)\r\nconst [valueCountryChange, setValueCountryChange] = useState('Italy')\r\nconst [valueModalTM, setValueModalTM] = useState(false)\r\nconst [valueTMChange, setValueTMChange] = useState('')\r\nconst [valueModalSM, setValueModalSM] = useState(false)\r\nconst [valueSMChange, setValueSMChange] = useState('')\r\nconst [valueModalRoad, setValueModalRoad] = useState(false)\r\nconst [valueRoadChange, setValueRoadChange] = useState('')\r\nconst [valueModalLOGBudget, setValueModalLOGBudget] = useState(false)\r\nconst [valueLOGBudgetChange, setValueLOGBudgetChange] = useState('')\r\nconst [valueModalGate, setValueModalGate] = useState(false)\r\nconst [valueGateChange, setValueGateChange] = useState('')\r\nconst [valueModalStatus, setValueModalStatus] = useState(false)\r\nconst [valueStatusChange, setValueStatusChange] = useState('')\r\nconst [valueModalClient, setValueModalClient] = useState(false)\r\nconst [valueClientChange, setValueClientChange] = useState('')\r\nconst [valueModalComments, setValueModalComments] = useState(false)\r\nconst [valueCommentsChange, setValueCommentsChange] = useState('')\r\nconst [valueModalKO, setValueModalKO] = useState(false)\r\nconst [valueKOChange, setValueKOChange] = useState(Date.now().parse)\r\nconst [valueModalOI, setValueModalOI] = useState(false)\r\nconst [valueOIChange, setValueOIChange] = useState(Date.now().parse)\r\nconst [valueIsFilter, setValueIsFilter] = useState(false)\r\nconst [valueFilterPriority, setValueFilterPriority] = useState('***')\r\nconst [valueFilterBlade, setValueFilterBlade] = useState('***')\r\nconst [valueFilterTower, setValueFilterTower] = useState('***')\r\nconst [valueFilterGeneration, setValueFilterGeneration] = useState('***')\r\nconst [valueFilterTM, setValueFilterTM] = useState('***')\r\nconst [valueFilterSM, setValueFilterSM] = useState('***')\r\nconst [valueFilterRoadSurvey, setValueFilterRoadSurvey] = useState('***')\r\nconst [valueFilterLOGBudget, setValueFilterLOGBudget] = useState('***')\r\nconst [valueFilterGate, setValueFilterGate] = useState('***')\r\nconst [valueFilterStatus, setValueFilterStatus] = useState('***')\r\nconst [valueFilterProject, setValueFilterProject] = useState('')\r\nconst [valueFilterClient, setValueFilterClient] = useState('')\r\nconst [valueFilterCountry, setValueFilterCountry] = useState('***')\r\n\r\n\r\nconst onClickAddProject = () => {\r\n  setOpen(true)\r\n  //console.log(open)\r\n}\r\n\r\nconst handleClose = () => {\r\n  setOpen(false)\r\n}\r\n\r\nconst onClickRecordProject = async () => {\r\n\r\nif (\r\n  valueProject !== '' &&\r\n  valueCountry !== '' &&\r\n  valueQtty !== '' &&\r\n  valueGeneration !== '' &&\r\n  valueBlade !== '' &&\r\n  valueTower !== '' &&\r\n  valuePriority !== ''\r\n)\r\n\r\n{\r\n\r\n              await firebase.firestore().collection('Projects').doc(`${valueProject}`).set({\r\n                project: valueProject,\r\n                country: valueCountry,\r\n                quantity: valueQtty,\r\n                generation: valueGeneration,\r\n                blade: valueBlade,\r\n                tower: valueTower,\r\n                tm: valueTM,\r\n                sm: valueSM,\r\n                client: valueClient,\r\n                priority: valuePriority,\r\n                dateOI: Date.parse(valueOrderIntake)/*moment(valueOrderIntake).unix()*/,\r\n                dateKO: Date.parse(valueKO)/*moment(valueKO).unix()*/,\r\n                roadSurvey: valueRS,\r\n                logBudget: valueLOG,\r\n                gate: valueGate,\r\n                status: valueStatus,\r\n                comments: valueComments\r\n              })\r\n              .then(function() {\r\n                console.log(\"Document successfully written!\");\r\n                setOpen(false)\r\n                setValueProject(Date.now())\r\n                setValueCountry('France')\r\n                setValueQtty('15')\r\n                setValueGeneration('Delta')\r\n                setValueBlade('N117')\r\n                setValueTower('TS91')\r\n                setValuePriority('Medium')\r\n                setValueTM('')\r\n                setValueSM('')\r\n                setValueClient('')\r\n                //setValuePriority('')\r\n                setValueOrderIntake(Date.now())\r\n                setValueKO(Date.now())\r\n                setValueRS('')\r\n                setValueLOG('')\r\n                setValueGate('')\r\n                setValueStatus('')\r\n                setValueComments('')\r\n                setValueValidation(false)\r\n                //setvalueFirestore([...valueFirestore])//ajout ok?\r\n\r\n                //ON ENLEVE LES CRITERES DE FILTRE POUR RETROUVER NOTRE projet\r\n                setValueFilterPriority('***')\r\n                setValueFilterBlade('***')\r\n                setValueFilterTower('***')\r\n                setValueFilterGeneration('***')\r\n                setValueFilterTM('***')\r\n                setValueFilterSM('***')\r\n                setValueFilterRoadSurvey('***')\r\n                setValueFilterLOGBudget('***')\r\n                setValueFilterGate('***')\r\n                setValueFilterStatus('***')\r\n                setValueFilterProject('')\r\n                setValueFilterClient('')\r\n                setValueFilterCountry('***')\r\n\r\n              })\r\n              .catch(function(error) {\r\n                console.error(\"Error writing document: \", error);\r\n\r\n\r\n\r\n            });\r\n\r\n            } else {\r\n              console.log('All the fields to be filled!')\r\n              setValueValidation(true)\r\n            }\r\n\r\n\r\n}\r\n\r\nconst onChangeProjectValue = (event) => {\r\n    setValueProject(event.target.value)\r\n}\r\n\r\nconst onChangeCountry = (event) => {\r\n  //console.log('ici',event.targetvalue)\r\n  setValueCountry(event.target.value)\r\n}\r\n\r\nconst onChangeQtty = (event) => {\r\n  //console.log('ici',event.targetvalue)\r\n  setValueQtty(event.target.value)\r\n}\r\n\r\n\r\nconst onChangeGeneration = (event) => {\r\n  //console.log('ici',event.targetvalue)\r\n  setValueGeneration(event.target.value)\r\n}\r\n\r\nconst onChangeBlade = (event) => {\r\n  //console.log('ici',event.targetvalue)\r\n  setValueBlade(event.target.value)\r\n}\r\n\r\nconst onChangeTower = (event) => {\r\n  //console.log('ici',event.targetvalue)\r\n  setValueTower(event.target.value)\r\n}\r\n\r\nconst onChangeTM = (event) => {\r\n  //console.log('ici',event.targetvalue)\r\n  setValueTM(event.target.value)\r\n}\r\n\r\nconst onChangeSM = (event) => {\r\n  //console.log('ici',event.targetvalue)\r\n  setValueSM(event.target.value)\r\n}\r\n\r\nconst onChangeClient = (event) => {\r\n  //console.log('ici',event.targetvalue)\r\n  setValueClient(event.target.value)\r\n}\r\n\r\nconst onChangePriority = (event) => {\r\n  //console.log('ici',event.targetvalue)\r\n  setValuePriority(event.target.value)\r\n}\r\n\r\nconst onChangeOI = (event) => {\r\n  //console.log(event)\r\n  setValueOrderIntake(event)\r\n}\r\n\r\nconst onChangeKO = (event) => {\r\n  //console.log(event)\r\n  setValueKO(event)\r\n}\r\n\r\nconst onChangeRS = (event) => {\r\n  setValueRS(event.target.value)\r\n}\r\n\r\nconst onChangeLOG = (event) => {\r\n  setValueLOG(event.target.value)\r\n}\r\n\r\nconst onChangeGate = (event) => {\r\n  setValueGate(event.target.value)\r\n}\r\n\r\nconst onChangeStatus = (event) => {\r\n  setValueStatus(event.target.value)\r\n}\r\n\r\nconst onChangeComments = (event) => {\r\n  setValueComments(event.target.value)\r\n}\r\n\r\nconst onClickValidation = () => {\r\n  setValueValidation(false)\r\n}\r\n\r\n//QTTY\r\nconst onClickQtty = (event, quantity) => {\r\n  //alert('on affiche le modal')\r\n  setValueQttyChange(quantity)\r\n  setValueModalQtty(true)\r\n  setValueProjectChange(event)\r\n  //console.log('project name: ', event)\r\n\r\n}\r\n\r\nconst handleCloseQtty = () => {\r\n  setValueModalQtty(false)\r\n}\r\n\r\nconst onChangeDialogQtty = (event) => {\r\n  setValueQttyChange(event.target.value)\r\n}\r\n\r\nconst handleValidateQtty = async (event) => {\r\n  //console.log('ici on va rentrer dans Firestore...')\r\n\r\n  //ici je sais déjà récupérer la valeur du Qtty mais il me faut le nom du project à trouver comme ref\r\n  //console.log('dans la procédure',event)\r\n  //console.log('new qtty', valueQttyChange)\r\n  //console.log('projet qui va être modifié: ', valueProjectChange )\r\n\r\n  var db = firebase.firestore().collection(\"Projects\").doc(`${valueProjectChange}`)\r\n\r\n  db.update({\r\n            quantity: valueQttyChange\r\n          })\r\n          .then(function() {\r\n            console.log(\"Document successfully updated!\");\r\n            setValueModalQtty(false)\r\n            })\r\n          .catch(function(error) {\r\n            // The document probably doesn't exist.\r\n          console.error(\"Error updating document: \", error);\r\n          setValueModalQtty(false)\r\n});\r\n\r\n\r\n\r\n}\r\n\r\n//BLADES\r\n\r\nconst onClickBlade = (event, blade) => {\r\n  //alert('on affiche le modal')\r\n  setValueBladeChange(blade)\r\n  setValueModalBlade(true)\r\n  setValueProjectChange(event)\r\n  //console.log('project name: ', event)\r\n\r\n}\r\n\r\nconst handleCloseBlade = () => {\r\n  setValueModalBlade(false)\r\n}\r\n\r\nconst onChangeDialogBlade = (event) => {\r\n  setValueBladeChange(event.target.value)\r\n}\r\n\r\nconst handleValidateBlade = async (event) => {\r\n  //console.log('ici on va rentrer dans Firestore...')\r\n\r\n  //ici je sais déjà récupérer la valeur du Qtty mais il me faut le nom du project à trouver comme ref\r\n  //console.log('dans la procédure',event)\r\n  //console.log('new qtty', valueQttyChange)\r\n  //console.log('projet qui va être modifié: ', valueProjectChange )\r\n\r\n  var db = firebase.firestore().collection(\"Projects\").doc(`${valueProjectChange}`)\r\n\r\n  db.update({\r\n            blade: valueBladeChange\r\n          })\r\n          .then(function() {\r\n            console.log(\"Document successfully updated!\");\r\n            setValueModalBlade(false)\r\n            })\r\n          .catch(function(error) {\r\n            // The document probably doesn't exist.\r\n          console.error(\"Error updating document: \", error);\r\n          setValueModalBlade(false)\r\n});\r\n\r\n\r\n\r\n}\r\n\r\n//TOWERS\r\n\r\nconst onClickTower = (event, tower) => {\r\n  //alert('on affiche le modal')\r\n  setValueTowerChange(tower)\r\n  setValueModalTower(true)\r\n  setValueProjectChange(event)\r\n  //console.log('project name: ', event)\r\n\r\n}\r\n\r\nconst handleCloseTower = () => {\r\n  setValueModalTower(false)\r\n}\r\n\r\nconst onChangeDialogTower = (event) => {\r\n  setValueTowerChange(event.target.value)\r\n}\r\n\r\nconst handleValidateTower = async (event) => {\r\n  //console.log('ici on va rentrer dans Firestore...')\r\n\r\n  //ici je sais déjà récupérer la valeur du Qtty mais il me faut le nom du project à trouver comme ref\r\n  //console.log('dans la procédure',event)\r\n  //console.log('new qtty', valueQttyChange)\r\n  //console.log('projet qui va être modifié: ', valueProjectChange )\r\n\r\n  var db = firebase.firestore().collection(\"Projects\").doc(`${valueProjectChange}`)\r\n\r\n  db.update({\r\n            tower: valueTowerChange\r\n          })\r\n          .then(function() {\r\n            console.log(\"Document successfully updated!\");\r\n            setValueModalTower(false)\r\n            })\r\n          .catch(function(error) {\r\n            // The document probably doesn't exist.\r\n          console.error(\"Error updating document: \", error);\r\n          setValueModalTower(false)\r\n});\r\n\r\n\r\n\r\n}\r\n\r\n//GENERATIONS\r\n\r\nconst onClickGeneration = (event, generation) => {\r\n  //alert('on affiche le modal')\r\n  setValueGenerationChange(generation)\r\n  setValueModalGeneration(true)\r\n  setValueProjectChange(event)\r\n  console.log('project name: ', event)\r\n\r\n}\r\n\r\nconst handleCloseGeneration = () => {\r\n  setValueModalGeneration(false)\r\n}\r\n\r\nconst onChangeDialogGeneration = (event) => {\r\n  setValueGenerationChange(event.target.value)\r\n}\r\n\r\nconst handleValidateGeneration = async (event) => {\r\n  //console.log('ici on va rentrer dans Firestore...')\r\n\r\n  //ici je sais déjà récupérer la valeur du Qtty mais il me faut le nom du project à trouver comme ref\r\n  //console.log('dans la procédure',event)\r\n  //console.log('new qtty', valueQttyChange)\r\n  //console.log('projet qui va être modifié: ', valueProjectChange )\r\n\r\n  var db = firebase.firestore().collection(\"Projects\").doc(`${valueProjectChange}`)\r\n\r\n  db.update({\r\n            generation: valueGenerationChange\r\n          })\r\n          .then(function() {\r\n            console.log(\"Document successfully updated!\");\r\n            setValueModalGeneration(false)\r\n            })\r\n          .catch(function(error) {\r\n            // The document probably doesn't exist.\r\n          console.error(\"Error updating document: \", error);\r\n          setValueModalGeneration(false)\r\n});\r\n\r\n\r\n\r\n}\r\n\r\n\r\n//PRIORITY\r\n\r\nconst onClickPriority = (event, priority) => {\r\n  //alert('on affiche le modal')\r\n  setValuePriorityChange(priority)\r\n  setValueModalPriority(true)\r\n  setValueProjectChange(event)\r\n  console.log('project name: ', event)\r\n\r\n}\r\n\r\nconst handleClosePriority = () => {\r\n  setValueModalPriority(false)\r\n}\r\n\r\nconst onChangeDialogPriority = (event) => {\r\n  setValuePriorityChange(event.target.value)\r\n}\r\n\r\nconst handleValidatePriority = async (event) => {\r\n  //console.log('ici on va rentrer dans Firestore...')\r\n\r\n  //ici je sais déjà récupérer la valeur du Qtty mais il me faut le nom du project à trouver comme ref\r\n  //console.log('dans la procédure',event)\r\n  //console.log('new qtty', valueQttyChange)\r\n  //console.log('projet qui va être modifié: ', valueProjectChange )\r\n\r\n  var db = firebase.firestore().collection(\"Projects\").doc(`${valueProjectChange}`)\r\n\r\n  db.update({\r\n            priority: valuePriorityChange\r\n          })\r\n          .then(function() {\r\n            console.log(\"Document successfully updated!\");\r\n            setValueModalPriority(false)\r\n            })\r\n          .catch(function(error) {\r\n            // The document probably doesn't exist.\r\n          console.error(\"Error updating document: \", error);\r\n          setValueModalPriority(false)\r\n});\r\n\r\n\r\n\r\n}\r\n\r\n//COUNTRY\r\n\r\n\r\nconst onClickCountry = (event, country) => {\r\n  //alert('on affiche le modal')\r\n  setValueCountryChange(country)\r\n  setValueModalCountry(true)\r\n  setValueProjectChange(event)\r\n  console.log('project name: ', event)\r\n\r\n}\r\n\r\nconst handleCloseCountry = () => {\r\n  setValueModalCountry(false)\r\n}\r\n\r\nconst onChangeDialogCountry = (event) => {\r\n  setValueCountryChange(event.target.value)\r\n}\r\n\r\nconst handleValidateCountry = async (event) => {\r\n  //console.log('ici on va rentrer dans Firestore...')\r\n\r\n  //ici je sais déjà récupérer la valeur du Qtty mais il me faut le nom du project à trouver comme ref\r\n  //console.log('dans la procédure',event)\r\n  //console.log('new qtty', valueQttyChange)\r\n  //console.log('projet qui va être modifié: ', valueProjectChange )\r\n\r\n  var db = firebase.firestore().collection(\"Projects\").doc(`${valueProjectChange}`)\r\n\r\n  db.update({\r\n            country: valueCountryChange\r\n          })\r\n          .then(function() {\r\n            console.log(\"Document successfully updated!\");\r\n            setValueModalCountry(false)\r\n            })\r\n          .catch(function(error) {\r\n            // The document probably doesn't exist.\r\n          console.error(\"Error updating document: \", error);\r\n          setValueModalCountry(false)\r\n});\r\n\r\n\r\n\r\n}\r\n\r\n//TM\r\n\r\n\r\nconst onClickTM = (event, tm) => {\r\n  //alert('on affiche le modal')\r\n  setValueTMChange(tm)\r\n  setValueModalTM(true)\r\n  setValueProjectChange(event)\r\n  console.log('project name: ', event)\r\n\r\n}\r\n\r\nconst handleCloseTM = () => {\r\n  setValueModalTM(false)\r\n}\r\n\r\nconst onChangeDialogTM = (event) => {\r\n  setValueTMChange(event.target.value)\r\n}\r\n\r\nconst handleValidateTM = async (event) => {\r\n  //console.log('ici on va rentrer dans Firestore...')\r\n\r\n  //ici je sais déjà récupérer la valeur du Qtty mais il me faut le nom du project à trouver comme ref\r\n  //console.log('dans la procédure',event)\r\n  //console.log('new qtty', valueQttyChange)\r\n  //console.log('projet qui va être modifié: ', valueProjectChange )\r\n\r\n  var db = firebase.firestore().collection(\"Projects\").doc(`${valueProjectChange}`)\r\n\r\n  db.update({\r\n            tm: valueTMChange\r\n          })\r\n          .then(function() {\r\n            console.log(\"Document successfully updated!\");\r\n            setValueModalTM(false)\r\n            })\r\n          .catch(function(error) {\r\n            // The document probably doesn't exist.\r\n          console.error(\"Error updating document: \", error);\r\n          setValueModalTM(false)\r\n});\r\n\r\n\r\n\r\n}\r\n\r\n\r\n//SM\r\n\r\n\r\nconst onClickSM = (event, sm) => {\r\n  //alert('on affiche le modal')\r\n  setValueSMChange(sm)\r\n  setValueModalSM(true)\r\n  setValueProjectChange(event)\r\n  console.log('project name: ', event)\r\n\r\n}\r\n\r\nconst handleCloseSM = () => {\r\n  setValueModalSM(false)\r\n}\r\n\r\nconst onChangeDialogSM = (event) => {\r\n  setValueSMChange(event.target.value)\r\n}\r\n\r\nconst handleValidateSM = async (event) => {\r\n  //console.log('ici on va rentrer dans Firestore...')\r\n\r\n  //ici je sais déjà récupérer la valeur du Qtty mais il me faut le nom du project à trouver comme ref\r\n  //console.log('dans la procédure',event)\r\n  //console.log('new qtty', valueQttyChange)\r\n  //console.log('projet qui va être modifié: ', valueProjectChange )\r\n\r\n  var db = firebase.firestore().collection(\"Projects\").doc(`${valueProjectChange}`)\r\n\r\n  db.update({\r\n            sm: valueSMChange\r\n          })\r\n          .then(function() {\r\n            console.log(\"Document successfully updated!\");\r\n            setValueModalSM(false)\r\n            })\r\n          .catch(function(error) {\r\n            // The document probably doesn't exist.\r\n          console.error(\"Error updating document: \", error);\r\n          setValueModalSM(false)\r\n});\r\n\r\n\r\n\r\n}\r\n\r\n//ROAD\r\n\r\nconst onClickRoad = (event, roadSurvey) => {\r\n  //alert('on affiche le modal')\r\n  setValueRoadChange(roadSurvey)\r\n  setValueModalRoad(true)\r\n  setValueProjectChange(event)\r\n  console.log('project name: ', event)\r\n\r\n}\r\n\r\nconst handleCloseRoad = () => {\r\n  setValueModalRoad(false)\r\n}\r\n\r\nconst onChangeDialogRoad = (event) => {\r\n  setValueRoadChange(event.target.value)\r\n}\r\n\r\nconst handleValidateRoad = async (event) => {\r\n  //console.log('ici on va rentrer dans Firestore...')\r\n\r\n  //ici je sais déjà récupérer la valeur du Qtty mais il me faut le nom du project à trouver comme ref\r\n  //console.log('dans la procédure',event)\r\n  //console.log('new qtty', valueQttyChange)\r\n  //console.log('projet qui va être modifié: ', valueProjectChange )\r\n\r\n  var db = firebase.firestore().collection(\"Projects\").doc(`${valueProjectChange}`)\r\n\r\n  db.update({\r\n            roadSurvey: valueRoadChange\r\n          })\r\n          .then(function() {\r\n            console.log(\"Document successfully updated!\");\r\n            setValueModalRoad(false)\r\n            })\r\n          .catch(function(error) {\r\n            // The document probably doesn't exist.\r\n          console.error(\"Error updating document: \", error);\r\n          setValueModalRoad(false)\r\n});\r\n\r\n\r\n\r\n}\r\n\r\n//LOG Budget\r\n\r\nconst onClickLOGBudget = (event, logBudget) => {\r\n  //alert('on affiche le modal')\r\n  setValueLOGBudgetChange(logBudget)\r\n  setValueModalLOGBudget(true)\r\n  setValueProjectChange(event)\r\n  console.log('project name: ', event)\r\n\r\n}\r\n\r\nconst handleCloseLOGBudget = () => {\r\n  setValueModalLOGBudget(false)\r\n}\r\n\r\nconst onChangeDialogLOGBudget = (event) => {\r\n  setValueLOGBudgetChange(event.target.value)\r\n}\r\n\r\nconst handleValidateLOGBudget = async (event) => {\r\n  //console.log('ici on va rentrer dans Firestore...')\r\n\r\n  //ici je sais déjà récupérer la valeur du Qtty mais il me faut le nom du project à trouver comme ref\r\n  //console.log('dans la procédure',event)\r\n  //console.log('new qtty', valueQttyChange)\r\n  //console.log('projet qui va être modifié: ', valueProjectChange )\r\n\r\n  var db = firebase.firestore().collection(\"Projects\").doc(`${valueProjectChange}`)\r\n\r\n  db.update({\r\n            logBudget: valueLOGBudgetChange\r\n          })\r\n          .then(function() {\r\n            console.log(\"Document successfully updated!\");\r\n            setValueModalLOGBudget(false)\r\n            })\r\n          .catch(function(error) {\r\n            // The document probably doesn't exist.\r\n          console.error(\"Error updating document: \", error);\r\n          setValueModalLOGBudget(false)\r\n});\r\n\r\n\r\n\r\n}\r\n\r\n//GATE\r\n\r\nconst onClickGate = (event, gate) => {\r\n  //alert('on affiche le modal')\r\n  setValueGateChange(gate)\r\n  setValueModalGate(true)\r\n  setValueProjectChange(event)\r\n  //console.log('project name: ', event)\r\n\r\n}\r\n\r\nconst handleCloseGate = () => {\r\n  setValueModalGate(false)\r\n}\r\n\r\nconst onChangeDialogGate = (event) => {\r\n  setValueGateChange(event.target.value)\r\n}\r\n\r\nconst handleValidateGate = async (event) => {\r\n  //console.log('ici on va rentrer dans Firestore...')\r\n\r\n  //ici je sais déjà récupérer la valeur du Qtty mais il me faut le nom du project à trouver comme ref\r\n  //console.log('dans la procédure',event)\r\n  //console.log('new qtty', valueQttyChange)\r\n  //console.log('projet qui va être modifié: ', valueProjectChange )\r\n\r\n  var db = firebase.firestore().collection(\"Projects\").doc(`${valueProjectChange}`)\r\n\r\n  db.update({\r\n            gate: valueGateChange\r\n          })\r\n          .then(function() {\r\n            console.log(\"Document successfully updated!\");\r\n            setValueModalGate(false)\r\n            })\r\n          .catch(function(error) {\r\n            // The document probably doesn't exist.\r\n          console.error(\"Error updating document: \", error);\r\n          setValueModalGate(false)\r\n});\r\n\r\n\r\n\r\n}\r\n\r\n//STATUS\r\n\r\nconst onClickStatus = (event, status) => {\r\n  //alert('on affiche le modal')\r\n  setValueStatusChange(status)\r\n  setValueModalStatus(true)\r\n  setValueProjectChange(event)\r\n  console.log('project name!!!!!!!!!!!!!!: ', status)\r\n\r\n}\r\n\r\nconst handleCloseStatus = () => {\r\n  setValueModalStatus(false)\r\n}\r\n\r\nconst onChangeDialogStatus = (event) => {\r\n  setValueStatusChange(event.target.value)\r\n}\r\n\r\nconst handleValidateStatus = async (event) => {\r\n  //console.log('ici on va rentrer dans Firestore...')\r\n\r\n  //ici je sais déjà récupérer la valeur du Qtty mais il me faut le nom du project à trouver comme ref\r\n  //console.log('dans la procédure',event)\r\n  //console.log('new qtty', valueQttyChange)\r\n  //console.log('projet qui va être modifié: ', valueProjectChange )\r\n\r\n  var db = firebase.firestore().collection(\"Projects\").doc(`${valueProjectChange}`)\r\n\r\n  db.update({\r\n            status: valueStatusChange\r\n          })\r\n          .then(function() {\r\n            console.log(\"Document successfully updated!\");\r\n            setValueModalStatus(false)\r\n            })\r\n          .catch(function(error) {\r\n            // The document probably doesn't exist.\r\n          console.error(\"Error updating document: \", error);\r\n          setValueModalStatus(false)\r\n});\r\n\r\n\r\n\r\n}\r\n\r\n//CLIENT\r\n\r\nconst onClickClient = (event, client) => {\r\n  //alert('on affiche le modal')\r\n  setValueClientChange(client)\r\n  setValueModalClient(true)\r\n  setValueProjectChange(event)\r\n  console.log('project name: ', event)\r\n\r\n}\r\n\r\nconst handleCloseClient = () => {\r\n  setValueModalClient(false)\r\n}\r\n\r\nconst onChangeDialogClient = (event) => {\r\n  setValueClientChange(event.target.value)\r\n}\r\n\r\nconst handleValidateClient = async (event) => {\r\n  //console.log('ici on va rentrer dans Firestore...')\r\n\r\n  //ici je sais déjà récupérer la valeur du Qtty mais il me faut le nom du project à trouver comme ref\r\n  //console.log('dans la procédure',event)\r\n  //console.log('new qtty', valueQttyChange)\r\n  //console.log('projet qui va être modifié: ', valueProjectChange )\r\n\r\n  var db = firebase.firestore().collection(\"Projects\").doc(`${valueProjectChange}`)\r\n\r\n  db.update({\r\n            client: valueClientChange\r\n          })\r\n          .then(function() {\r\n            console.log(\"Document successfully updated!\");\r\n            setValueModalClient(false)\r\n            setValueClientChange('')\r\n            })\r\n          .catch(function(error) {\r\n            // The document probably doesn't exist.\r\n          console.error(\"Error updating document: \", error);\r\n          setValueModalClient(false)\r\n});\r\n\r\n\r\n\r\n}\r\n\r\n//COMMENTS\r\n\r\n\r\nconst onClickComments = (event, comments) => {\r\n  //alert('on affiche le modal')\r\n  setValueCommentsChange(comments)\r\n  setValueModalComments(true)\r\n  setValueProjectChange(event)\r\n  //console.log('project name: ', event)\r\n  //console.log('comments: ', comments)\r\n\r\n}\r\n\r\nconst handleCloseComments = () => {\r\n  setValueModalComments(false)\r\n}\r\n\r\nconst onChangeDialogComments = (event) => {\r\n  setValueCommentsChange(event.target.value)\r\n}\r\n\r\nconst handleValidateComments = async (event) => {\r\n  //console.log('ici on va rentrer dans Firestore...')\r\n\r\n  //ici je sais déjà récupérer la valeur du Qtty mais il me faut le nom du project à trouver comme ref\r\n  //console.log('dans la procédure',event)\r\n  //console.log('new qtty', valueQttyChange)\r\n  //console.log('projet qui va être modifié: ', valueProjectChange )\r\n\r\n  var db = firebase.firestore().collection(\"Projects\").doc(`${valueProjectChange}`)\r\n\r\n  db.update({\r\n            comments: valueCommentsChange\r\n          })\r\n          .then(function() {\r\n            console.log(\"Document successfully updated!\");\r\n            setValueModalComments(false)\r\n            setValueCommentsChange('')\r\n            })\r\n          .catch(function(error) {\r\n            // The document probably doesn't exist.\r\n          console.error(\"Error updating document: \", error);\r\n          setValueModalComments(false)\r\n});\r\n\r\n\r\n\r\n}\r\n\r\n\r\n//KICK-OFF\r\n\r\nconst onClickKO = async (event, date) => {\r\n  //alert('on affiche le modal')\r\n  //console.log('date qui vient de firestore', date) //timestamp => OK => on la converti en dates\r\n  setValueKOChange(date)\r\n\r\n  setValueModalKO(true)\r\n  setValueProjectChange(event)\r\n  //console.log('project name: ', event)\r\n  //console.log('date: ', moment.unix(date).format(\"DD/MM/yyyy\"))\r\n  //console.log('new date: ', valueKOChange)\r\n  //console.log('convert to timestamp', moment(valueKOChange).format(\"x\"))\r\n}\r\n\r\nconst handleCloseKO = () => {\r\n  setValueModalKO(false)\r\n}\r\n\r\nconst onChangeDialogKO = (event) => {\r\n  //console.log('AVANT HEIN!', event)\r\n  //console.log('HEIN!!!! ', moment.unix(event).format(\"DD/MM/yyyy\"))\r\n  //console.log('date brute du picker', event)\r\n  //console.log('date converti en timestamp', moment.unix(event). format('D/MM/yyyy'))\r\n  setValueKOChange( event/*moment.unix(event/1000). format('D/MM/yyyy')*/)\r\n}\r\n\r\nconst handleValidateKO = async (event) => {\r\n  //console.log('ici on va rentrer dans Firestore...')\r\n  //console.log(valueKOChange)\r\n  //console.log('valeur pour firestore', Date.parse(valueKOChange), typeof(Date.parse(valueKOChange)))\r\n\r\n\r\n  var db = firebase.firestore().collection(\"Projects\").doc(`${valueProjectChange}`)\r\n\r\n  db.update({\r\n            dateKO:  Date.parse(valueKOChange)\r\n          })\r\n          .then(function() {\r\n            console.log(\"Document successfully updated!\");\r\n            setValueModalKO(false)\r\n            //setValueKOChange('')\r\n            })\r\n          .catch(function(error) {\r\n            // The document probably doesn't exist.\r\n          console.error(\"Error updating document: \", error);\r\n          setValueModalKO(false)\r\n});\r\n\r\n\r\n\r\n}\r\n\r\n//OI\r\n\r\nconst onClickOI = async (event, date) => {\r\n  //alert('on affiche le modal')\r\n  //console.log('date qui vient de firestore', date) //timestamp => OK => on la converti en dates\r\n  setValueOIChange(date)\r\n\r\n  setValueModalOI(true)\r\n  setValueProjectChange(event)\r\n  //console.log('project name: ', event)\r\n  //console.log('date: ', moment.unix(date).format(\"DD/MM/yyyy\"))\r\n  //console.log('new date: ', valueKOChange)\r\n  //console.log('convert to timestamp', moment(valueKOChange).format(\"x\"))\r\n}\r\n\r\nconst handleCloseOI = () => {\r\n  setValueModalOI(false)\r\n}\r\n\r\nconst onChangeDialogOI = (event) => {\r\n  //console.log('AVANT HEIN!', event)\r\n  //console.log('HEIN!!!! ', moment.unix(event).format(\"DD/MM/yyyy\"))\r\n  //console.log('date brute du picker', event)\r\n  //console.log('date converti en timestamp', moment.unix(event). format('D/MM/yyyy'))\r\n  setValueOIChange( event/*moment.unix(event/1000). format('D/MM/yyyy')*/)\r\n}\r\n\r\nconst handleValidateOI = async (event) => {\r\n  //console.log('ici on va rentrer dans Firestore...')\r\n  //console.log(valueKOChange)\r\n  //console.log('valeur pour firestore', Date.parse(valueKOChange), typeof(Date.parse(valueKOChange)))\r\n\r\n\r\n  var db = firebase.firestore().collection(\"Projects\").doc(`${valueProjectChange}`)\r\n\r\n  db.update({\r\n            dateOI:  Date.parse(valueOIChange)\r\n          })\r\n          .then(function() {\r\n            console.log(\"Document successfully updated!\");\r\n            setValueModalOI(false)\r\n            //setValueKOChange('')\r\n            })\r\n          .catch(function(error) {\r\n            // The document probably doesn't exist.\r\n          console.error(\"Error updating document: \", error);\r\n          setValueModalOI(false)\r\n});\r\n\r\n\r\n\r\n}\r\n\r\n\r\n//Faire apparaitre Filter\r\n\r\nconst onClickFilter = () => {\r\n  setValueIsFilter(!valueIsFilter)\r\n}\r\n\r\n//Filter Priority\r\nconst onChangeFilterPriority = async (event) => {\r\n  await setValueFilterPriority(event.target.value)\r\n  //console.log('filtre: ', filterArray(valueFirestore, event.target.value, 'priority'))\r\n  //console.log(filterArray(valueFirestore, event.target.value))\r\n  //setvalueFirestore([...valueFirestore, ...filterArray(valueFirestore, event.target.value)])\r\n\r\n}\r\n\r\n//Filter Blade\r\nconst onChangeFilterBlade = (event) => {\r\n  setValueFilterBlade(event.target.value)\r\n\r\n}\r\n\r\n//Filter tower\r\nconst onChangeFilterTower = (event) => {\r\n  setValueFilterTower(event.target.value)\r\n\r\n}\r\n\r\n//Filter Generation\r\nconst onChangeFilterGeneration = (event) => {\r\n  setValueFilterGeneration(event.target.value)\r\n\r\n}\r\n\r\n//Filter TM\r\nconst onChangeFilterTM = (event) => {\r\n  setValueFilterTM(event.target.value)\r\n\r\n}\r\n\r\n//Filter SM\r\nconst onChangeFilterSM = (event) => {\r\n  setValueFilterSM(event.target.value)\r\n\r\n}\r\n\r\n//Filter Road Survey\r\nconst onChangeFilterRoadSurvey = (event) => {\r\n  setValueFilterRoadSurvey(event.target.value)\r\n\r\n}\r\n\r\n//Filter LOG Budget\r\nconst onChangeFilterLOGBudget = (event) => {\r\n  setValueFilterLOGBudget(event.target.value)\r\n\r\n}\r\n\r\n//Filter Gate\r\nconst onChangeFilterGate = (event) => {\r\n  setValueFilterGate(event.target.value)\r\n\r\n}\r\n\r\n//Filter Status\r\nconst onChangeFilterStatus = (event) => {\r\n  setValueFilterStatus(event.target.value)\r\n  //console.log('resultat' ,filterArray(valueFirestore, event.target.value, 'status'))\r\n\r\n}\r\n\r\n//Filter PROJECT\r\nconst onChangeFilterProject = (event) => {\r\n  setValueFilterProject(event.target.value)\r\n\r\n}\r\n\r\n//Filter CLIENT\r\nconst onChangeFilterClient = (event) => {\r\n  setValueFilterClient(event.target.value)\r\n\r\n}\r\n\r\n//Filter COUNTRY\r\nconst onChangeFilterCountry = (event) => {\r\n  setValueFilterCountry(event.target.value)\r\n  //alert(event.target.value)\r\n  //console.log('resultat' ,filterArray(valueFirestore, event.target.value, 'country'))\r\n}\r\n\r\nconst onChangeResetFilter = () =>{\r\n  //alert('ici on remet tout à zéro')\r\n  setValueFilterPriority('***')\r\n  setValueFilterBlade('***')\r\n  setValueFilterTower('***')\r\n  setValueFilterGeneration('***')\r\n  setValueFilterTM('***')\r\n  setValueFilterSM('***')\r\n  setValueFilterRoadSurvey('***')\r\n  setValueFilterLOGBudget('***')\r\n  setValueFilterGate('***')\r\n  setValueFilterStatus('***')\r\n  setValueFilterProject('')\r\n  setValueFilterClient('')\r\n  setValueFilterCountry('***')\r\n}\r\n\r\nvar filterCriteria = {\r\n  priority: valueFilterPriority,\r\n  blade: valueFilterBlade,\r\n  tower: valueFilterTower,\r\n  generation: valueFilterGeneration,\r\n  tm: valueFilterTM,\r\n  sm: valueFilterSM,\r\n  roadSurvey: valueFilterRoadSurvey,\r\n  logBudget: valueFilterLOGBudget,\r\n  gate: valueFilterGate,\r\n  status: valueFilterStatus,\r\n  project: valueFilterProject,\r\n  client: valueFilterClient,\r\n  country: valueFilterCountry\r\n}\r\n\r\n\r\nvar newProject = {\r\n  project: valueProject,\r\n  country: valueCountry,\r\n  quantity: valueQtty,\r\n  generation: valueGeneration,\r\n  blade: valueBlade,\r\n  tower: valueTower,\r\n  TM: valueTM,\r\n  SM: valueSM,\r\n  client: valueClient,\r\n  priority: valuePriority,\r\n  dateOI: moment(valueOrderIntake).unix(),\r\n  dateKO: moment(valueKO).unix(),\r\n  roadSurvey: valueRS,\r\n  logBudget: valueLOG,\r\n  gate: valueGate,\r\n  status: valueStatus,\r\n  comments: valueComments\r\n\r\n}\r\n\r\n//ON RECUPERE LE TABLEA DE DONNEES SUR firestore\r\nuseEffect(() => {\r\n\r\n  async function fetchData(){\r\n\r\n    var projects = [];\r\n\r\n    await firebase.firestore()\r\n                  .collection(\"Projects\")\r\n                  .onSnapshot(function(snapshot) {\r\n\r\n\r\n                                                  snapshot.docChanges().forEach(function(change) {\r\n\r\n                                                                                                  //console.log('change',change)\r\n\r\n                                                                                                  if (change.type === \"added\") {\r\n\r\n                                                                                                          projects.push(change.doc.data());\r\n\r\n                                                                                                  }\r\n\r\n                                                                                                  if (change.type === \"modified\") {\r\n                                                                                                          //console.log(\"Modified project: \", change.doc.data())\r\n\r\n                                                                                                          //ici on doit modifier intelligemment le tableu de project....\r\n                                                                                                          //projects.push(change.doc.data());\r\n                                                                                                          //on va supprimer l'élémént du tableau en cours qui a été modifié\r\n                                                                                                          var temp = change.doc.data().project\r\n                                                                                                          //console.log('index', findWithAttr(projects, 'project', temp))\r\n                                                                                                          projects.splice(findWithAttr(projects, 'project', temp), 1, change.doc.data())\r\n                                                                                                          //console.log('projects après update', projects)\r\n                                                                                                          //on va ajouter la nouvelle valeur (change.doc.data) à la même position\r\n\r\n\r\n\r\n                                                                                                          //console.log('dans le modified', projects)\r\n                                                                                                  }\r\n\r\n                                                                                                  if (change.type === \"removed\") {\r\n                                                                                                          console.log(\"Removed project: \", change.doc.data());\r\n                                                                                                          var temp = change.doc.data().project\r\n                                                                                                          //console.log('nom du projet', temp)\r\n                                                                                                          console.log('index', findWithAttr(projects, 'project', temp))\r\n                                                                                                          projects.splice(findWithAttr(projects, 'project', temp), 1)\r\n                                                                                                          console.log('projects après removed', projects)\r\n\r\n                                                                                                          }\r\n\r\n                                                                                                });\r\n                                                  //console.log('A LA FIN', projects)\r\n                                                  setvalueFirestore(projects, console.log('mis à jour! longueur est de: ', projects.length))\r\n                                                  //console.log('state is...', valueFirestore)\r\n\r\n                                              });\r\n\r\n\r\n  }\r\n\r\n   fetchData()\r\n\r\n}, [])\r\n\r\nconsole.log( 'liste des critères dans main', filterCriteria)\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n\r\n      <div>MAIN COMPONENT</div>\r\n\r\n    <AddProjectButton\r\n        label=\"Add a project\"\r\n        onClick={onClickAddProject}\r\n\r\n    />\r\n\r\n\r\n   <List\r\n          tableau={filterArray(valueFirestore, filterCriteria)}\r\n          onClickQtty={(event, quantity) => onClickQtty(event, quantity)}\r\n          onClickBlade={(event, blade) => onClickBlade(event, blade)}\r\n          onClickTower={(event, tower) => onClickTower(event, tower)}\r\n          onClickGeneration={(event, generation) => onClickGeneration(event, generation)}\r\n          onClickPriority={(event, priority) => onClickPriority(event, priority)}\r\n          onClickCountry={(event, country) => onClickCountry(event, country)}\r\n          onClickTM={(event, tm) => onClickTM(event, tm)}\r\n          onClickSM={(event, sm) => onClickSM(event, sm)}\r\n          onClickRoad={(event, roadSurvey) => onClickRoad(event, roadSurvey)}\r\n          onClickLOGBudget={(event, logBudget) => onClickLOGBudget(event, logBudget)}\r\n          onClickGate={(event, gate) => onClickGate(event, gate)}\r\n          onClickStatus={(event, status) => onClickStatus(event, status)}\r\n          onClickClient={(event, client) => onClickClient(event, client)}\r\n          onClickComments={(event, comments) => onClickComments(event, comments)}\r\n          onClickKO={(event, date) => onClickKO(event, date)}\r\n          onClickOI={(event, date) => onClickOI(event, date)}\r\n          onClickFilter={()=>onClickFilter()}\r\n          children={valueIsFilter && <Filter\r\n                                        valueFilterPriority={valueFilterPriority}\r\n                                        onChangeFilterPriority={onChangeFilterPriority}\r\n                                        valueFilterBlade={valueFilterBlade}\r\n                                        onChangeFilterBlade={onChangeFilterBlade}\r\n                                        valueFilterTower={valueFilterTower}\r\n                                        onChangeFilterTower={onChangeFilterTower}\r\n                                        valueFilterGeneration={valueFilterGeneration}\r\n                                        onChangeFilterGeneration={onChangeFilterGeneration}\r\n                                        valueFilterTM={valueFilterTM}\r\n                                        onChangeFilterTM={onChangeFilterTM}\r\n                                        valueFilterSM={valueFilterSM}\r\n                                        onChangeFilterSM={onChangeFilterSM}\r\n                                        valueFilterRoadSurvey={valueFilterRoadSurvey}\r\n                                        onChangeFilterRoadSurvey={onChangeFilterRoadSurvey}\r\n                                        valueFilterLOGBudget={valueFilterLOGBudget}\r\n                                        onChangeFilterLOGBudget={onChangeFilterLOGBudget}\r\n                                        valueFilterGate={valueFilterGate}\r\n                                        onChangeFilterGate={onChangeFilterGate}\r\n                                        valueFilterStatus={valueFilterStatus}\r\n                                        onChangeFilterStatus={onChangeFilterStatus}\r\n                                        valueFilterProject={valueFilterProject}\r\n                                        onChangeFilterProject={onChangeFilterProject}\r\n                                        valueFilterClient={valueFilterClient}\r\n                                        onChangeFilterClient={onChangeFilterClient}\r\n                                        valueFilterCountry={valueFilterCountry}\r\n                                        onChangeFilterCountry={onChangeFilterCountry}\r\n                                        onClickResetFilter={onChangeResetFilter}\r\n\r\n\r\n            />}\r\n    />\r\n\r\n    {currentUser? currentUser.email : 'not loggedin'}\r\n\r\n\r\n    <AddProjectDialog\r\n        open={open}\r\n        handleClose={handleClose}\r\n        onClick={onClickRecordProject}\r\n        titleDialog='Add a project'\r\n        buttonCancelLabel='Cancel'\r\n        buttonConfirmLabel='Add the project'\r\n        generalDescription='Fill as a minimum the following fields.'\r\n\r\n        valueProject={valueProject}\r\n        onChangeProjectValue={onChangeProjectValue}\r\n\r\n        valueCountry={valueCountry}\r\n        onChangeCountry={onChangeCountry}\r\n        dataCountries={countries}\r\n        labelCountry='Country'\r\n\r\n        labelQtty='Quantity'\r\n        valueQtty={valueQtty}\r\n        onChangeQtty={onChangeQtty}\r\n        dataQtty={dataQtty}\r\n\r\n        labelGeneration='Generation'\r\n        onChangeGeneration={onChangeGeneration}\r\n        dataGeneration={dataGeneration}\r\n\r\n        labelBlade='Blade'\r\n        valueBlade={valueBlade}\r\n        onChangeBlade={onChangeBlade}\r\n        dataBlade={dataBlades}\r\n\r\n\r\n        labelTower='Tower'\r\n        valueTower={valueTower}\r\n        onChangeTower={onChangeTower}\r\n        dataTower={dataTowers}\r\n\r\n        labelTM='Tender Manager'\r\n        valueTM={valueTM}\r\n        onChangeTM={onChangeTM}\r\n        dataTM={dataTM}\r\n\r\n        labelSM='Sales Manager'\r\n        valueSM={valueSM}\r\n        onChangeSM={onChangeSM}\r\n        dataSM={dataSM}\r\n\r\n        valueClient={valueClient}\r\n        onChangeClient={onChangeClient}\r\n\r\n        valuePriority={valuePriority}\r\n        onChangePriority={onChangePriority}\r\n        dataPriority={dataPriorities}\r\n        labelPriority='Priority'\r\n\r\n        labelOI='Order Intake Date'\r\n        valueOI={valueOrderIntake}\r\n        onChangeOI={onChangeOI}\r\n\r\n        labelKO='Kick-Off Date'\r\n        valueKO={valueKO}\r\n        onChangeKO={onChangeKO}\r\n\r\n        valueRS={valueRS}\r\n        onChangeRS={onChangeRS}\r\n        dataRS={dataRoadSurvey}\r\n        labelRS='Road Survey?'\r\n\r\n        valueLOG={valueLOG}\r\n        onChangeLOG={onChangeLOG}\r\n        dataLOG={dataLOGBudget}\r\n        labelLOG='Log Budget?'\r\n\r\n        valueGate={valueGate}\r\n        onChangeGate={onChangeGate}\r\n        dataGate={dataGate}\r\n        labelGate='Gate'\r\n\r\n        valueStatus={valueStatus}\r\n        onChangeStatus={onChangeStatus}\r\n        dataStatus={tenderStatus}\r\n        labelStatus='Status'\r\n\r\n        valueComments={valueComments}\r\n        onChangeComments={onChangeComments}\r\n        labelComments='Comments'\r\n\r\n        children={\r\n\r\n          valueValidation && <p style={styles.alert}>All mandatory fields to filled</p>\r\n\r\n\r\n        }\r\n\r\n\r\n    />\r\n\r\n{/*QTTY*/}\r\n    {valueModalQtty &&\r\n      <ModalQtty\r\n        open={valueModalQtty}\r\n        handleClose={handleCloseQtty}\r\n        titleDialog='Change WTG quantity'\r\n        dialogText='Pick a quantity'\r\n        labelValidate='Update'\r\n        handleValidate={handleValidateQtty}\r\n        children={\r\n          <SelectQtty\r\n              label='Quantity'\r\n              value={valueQttyChange}\r\n              onChange={onChangeDialogQtty}\r\n              data={dataQtty}\r\n          />\r\n        }\r\n\r\n        />\r\n    }\r\n\r\n{/*BLADE*/}\r\n    {valueModalBlade &&\r\n      <ModalBlade\r\n        open={valueModalBlade}\r\n        handleClose={handleCloseBlade}\r\n        titleDialog='Change Blade type'\r\n        dialogText='Pick a blade type'\r\n        labelValidate='Update'\r\n        handleValidate={handleValidateBlade}\r\n        children={\r\n          <SelectQtty\r\n              label='Blade type'\r\n              value={valueBladeChange}\r\n              onChange={onChangeDialogBlade}\r\n              data={dataBlades}\r\n          />\r\n        }\r\n\r\n        />\r\n    }\r\n\r\n{/*TOWER*/}\r\n    {valueModalTower &&\r\n      <ModalTower\r\n        open={valueModalTower}\r\n        handleClose={handleCloseTower}\r\n        titleDialog='Change Tower type'\r\n        dialogText='Pick a Tower type'\r\n        labelValidate='Update'\r\n        handleValidate={handleValidateTower}\r\n        children={\r\n          <SelectQtty\r\n              label='Tower type'\r\n              value={valueTowerChange}\r\n              onChange={onChangeDialogTower}\r\n              data={dataTowers}\r\n          />\r\n        }\r\n\r\n        />\r\n    }\r\n\r\n{/*GENERATION*/}\r\n    {valueModalGeneration &&\r\n      <ModalGeneration\r\n        open={valueModalGeneration}\r\n        handleClose={handleCloseGeneration}\r\n        titleDialog='Change Generation'\r\n        dialogText='Pick a generation'\r\n        labelValidate='Update'\r\n        handleValidate={handleValidateGeneration}\r\n        children={\r\n          <SelectQtty\r\n              label='Tower type'\r\n              value={valueGenerationChange}\r\n              onChange={onChangeDialogGeneration}\r\n              data={dataGeneration}\r\n          />\r\n        }\r\n\r\n        />\r\n    }\r\n\r\n{/*PRIORITY*/}\r\n    {valueModalPriority &&\r\n      <ModalPriority\r\n        open={valueModalPriority}\r\n        handleClose={handleClosePriority}\r\n        titleDialog='Change Priority'\r\n        dialogText='Pick a priority'\r\n        labelValidate='Update'\r\n        handleValidate={handleValidatePriority}\r\n        children={\r\n          <SelectQtty\r\n              label='Priority'\r\n              value={valuePriorityChange}\r\n              onChange={onChangeDialogPriority}\r\n              data={dataPriorities}\r\n          />\r\n        }\r\n\r\n        />\r\n    }\r\n\r\n{/*COUNTRY*/}\r\n    {valueModalCountry &&\r\n      <ModalCountry\r\n        open={valueModalCountry}\r\n        handleClose={handleCloseCountry}\r\n        titleDialog='Change Country'\r\n        dialogText='Pick a Country'\r\n        labelValidate='Update'\r\n        handleValidate={handleValidateCountry}\r\n        children={\r\n          <SelectQtty\r\n              label='Country'\r\n              value={valueCountryChange}\r\n              onChange={onChangeDialogCountry}\r\n              data={countries}\r\n          />\r\n        }\r\n\r\n        />\r\n    }\r\n\r\n\r\n{/*TM*/}\r\n    {valueModalTM &&\r\n      <ModalTM\r\n        open={valueModalTM}\r\n        handleClose={handleCloseTM}\r\n        titleDialog='Change the Tender Manager'\r\n        dialogText='Pick a Tender Manager'\r\n        labelValidate='Update'\r\n        handleValidate={handleValidateTM}\r\n        children={\r\n          <SelectQtty\r\n              label='Tender Manager'\r\n              value={valueTMChange}\r\n              onChange={onChangeDialogTM}\r\n              data={dataTM}\r\n          />\r\n        }\r\n\r\n        />\r\n    }\r\n\r\n\r\n{/*SM*/}\r\n    {valueModalSM &&\r\n      <ModalSM\r\n        open={valueModalSM}\r\n        handleClose={handleCloseSM}\r\n        titleDialog='Change the Sales Manager'\r\n        dialogText='Pick a Sales Manager'\r\n        labelValidate='Update'\r\n        handleValidate={handleValidateSM}\r\n        children={\r\n          <SelectQtty\r\n              label='Sales Manager'\r\n              value={valueSMChange}\r\n              onChange={onChangeDialogSM}\r\n              data={dataSM}\r\n          />\r\n        }\r\n\r\n        />\r\n    }\r\n\r\n{/*ROAD*/}\r\n    {valueModalRoad &&\r\n      <ModalRoad\r\n        open={valueModalRoad}\r\n        handleClose={handleCloseRoad}\r\n        titleDialog='Change the status for Road Survey'\r\n        dialogText='Pick a status for Road Survey'\r\n        labelValidate='Update'\r\n        handleValidate={handleValidateRoad}\r\n        children={\r\n          <SelectQtty\r\n              label='Road Survey Status'\r\n              value={valueRoadChange}\r\n              onChange={onChangeDialogRoad}\r\n              data={dataRoadSurvey}\r\n          />\r\n        }\r\n\r\n        />\r\n    }\r\n\r\n\r\n{/*LOG BUDGET*/}\r\n    {valueModalLOGBudget &&\r\n      <ModalLOGBudget\r\n        open={valueModalLOGBudget}\r\n        handleClose={handleCloseLOGBudget}\r\n        titleDialog='Change the status for LOG Budget'\r\n        dialogText='Pick a status for LOG Budget'\r\n        labelValidate='Update'\r\n        handleValidate={handleValidateLOGBudget}\r\n        children={\r\n          <SelectQtty\r\n              label='LOG Budget Status'\r\n              value={valueLOGBudgetChange}\r\n              onChange={onChangeDialogLOGBudget}\r\n              data={dataLOGBudget}\r\n          />\r\n        }\r\n\r\n        />\r\n    }\r\n\r\n\r\n{/*GATE*/}\r\n    {valueModalGate &&\r\n      <ModalGate\r\n        open={valueModalGate}\r\n        handleClose={handleCloseGate}\r\n        titleDialog='Change the Gate Status'\r\n        dialogText='Pick a Gate status'\r\n        labelValidate='Update'\r\n        handleValidate={handleValidateGate}\r\n        children={\r\n          <SelectQtty\r\n              label='Gate Status'\r\n              value={valueGateChange}\r\n              onChange={onChangeDialogGate}\r\n              data={dataGate}\r\n          />\r\n        }\r\n\r\n        />\r\n    }\r\n\r\n\r\n{/*STATUS*/}\r\n    {valueModalStatus &&\r\n      <ModalStatus\r\n        open={valueModalStatus}\r\n        handleClose={handleCloseStatus}\r\n        titleDialog='Change the Project Status'\r\n        dialogText='Pick a Project status'\r\n        labelValidate='Update'\r\n        handleValidate={handleValidateStatus}\r\n        children={\r\n          <SelectQtty\r\n              label='Project Status'\r\n              value={valueStatusChange}\r\n              onChange={onChangeDialogStatus}\r\n              data={tenderStatus}\r\n          />\r\n        }\r\n\r\n        />\r\n    }\r\n\r\n{/*CLIENT*/}\r\n    {valueModalClient &&\r\n      <ModalClient\r\n        open={valueModalClient}\r\n        handleClose={handleCloseClient}\r\n        titleDialog='Change the Client'\r\n        dialogText='Write the client name'\r\n        labelValidate='Update'\r\n        handleValidate={handleValidateClient}\r\n        children={\r\n\r\n          <TextField\r\n            value={valueClientChange}\r\n            onChange={onChangeDialogClient}\r\n            label='Client Name'\r\n            placeholder='Write here'\r\n\r\n\r\n          />\r\n        }\r\n\r\n        />\r\n    }\r\n\r\n{/*COMMENTS*/}\r\n    {valueModalComments &&\r\n      <ModalComments\r\n        open={valueModalComments}\r\n        handleClose={handleCloseComments}\r\n        titleDialog='Change the comments'\r\n        dialogText='Write your comments'\r\n        labelValidate='Update'\r\n        handleValidate={handleValidateComments}\r\n        children={\r\n\r\n          <TextField\r\n            value={valueCommentsChange}\r\n            onChange={onChangeDialogComments}\r\n            label='Comments'\r\n            placeholder='Write here'\r\n            multiline\r\n            rows={3}\r\n            variant=\"outlined\"\r\n            style={{width:500}}\r\n\r\n\r\n          />\r\n        }\r\n\r\n        />\r\n    }\r\n\r\n{/*KICK-OFF*/}\r\n    {valueModalKO &&\r\n      <ModalKO\r\n        open={valueModalKO}\r\n        handleClose={handleCloseKO}\r\n        titleDialog='Change the Kick-Off date'\r\n        dialogText='Pick a date'\r\n        labelValidate='Update'\r\n        handleValidate={handleValidateKO}\r\n        children={\r\n            <DatePicker\r\n                labelDatePicker=''\r\n                valueDatePicker={valueKOChange}\r\n                onChangeDatePicker={onChangeDialogKO}\r\n            />\r\n      }\r\n\r\n        />\r\n    }\r\n\r\n{/*ORDER INTAKE*/}\r\n    {valueModalOI &&\r\n      <ModalOI\r\n        open={valueModalOI}\r\n        handleClose={handleCloseOI}\r\n        titleDialog='Change the Order Intake date'\r\n        dialogText='Pick a date'\r\n        labelValidate='Update'\r\n        handleValidate={handleValidateOI}\r\n        children={\r\n            <DatePicker\r\n                labelDatePicker=''\r\n                valueDatePicker={valueOIChange}\r\n                onChangeDatePicker={onChangeDialogOI}\r\n            />\r\n      }\r\n\r\n        />\r\n    }\r\n\r\n\r\n\r\n\r\n    </>\r\n  )\r\n}\r\n","D:\\ReactProject\\BETA\\forza\\src\\Components\\MyAppBar.js",[],"D:\\ReactProject\\BETA\\forza\\src\\Assets\\AppBar.js",["106","107","108","109","110","111","112","113","114","115"],"import React, {useEffect} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport logo from '../Images/Logo.png'\r\nimport {useAuth} from '../Context/AuthContext'\r\nimport {useHistory} from 'react-router-dom'\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport { CSVLink, CSVDownload } from \"react-csv\";\r\nimport firebase from '../firebase.js'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 0.25,\r\n  },\r\n  agencement:{\r\n    display: 'flex',\r\n    justifyContent: 'space-between'\r\n  },\r\n  meteo:{\r\n    display:'flex',\r\n    flexDirection: 'column',\r\n    padding: '10px'\r\n    //gridTemplateColumns: 'auto auto auto auto auto auto auto auto',\r\n    //gridColumnGap: '5px',\r\n    //gridRowGap: '5px',\r\n    //backgroundColor: 'red'\r\n  },\r\n  gridItem:  {\r\n    display: 'grid',\r\n    gridTemplateColumns: 'auto auto auto auto',\r\n    gridColumnGap: '25px',\r\n\r\n    //gridRowGap: '10px'\r\n  //backgroundColor: 'rgba(255, 255, 255, 0.8)',\r\n  //border: '1px solid rgba(0, 0, 0, 0.8)',\r\n  //padding: '20px',\r\n  //fontSize: '14px',\r\n  //textAlign: 'center'\r\n},\r\ntruc: {\r\n  width:80,\r\n  display: 'flex',\r\n  alignItems: 'center'\r\n}\r\n\r\n}));\r\n\r\nexport default function MenuAppBar({meteo}) {\r\n  const classes = useStyles();\r\n  const [auth, setAuth] = React.useState(false);\r\n  const [data, setData] = React.useState([]);\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const open = Boolean(anchorEl);\r\n  const {login, currentUser} = useAuth()\r\n\r\n  const {logout} = useAuth()\r\n  const history = useHistory()\r\n\r\n  const handleChange = (event) => {\r\n    setAuth(event.target.checked);\r\n  };\r\n\r\n  const handleMenu = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const handleLogOut = async () => {\r\n    await logout()\r\n    history.push('/')\r\n  }\r\n\r\n  const handleDashboard = async () => {\r\n    history.push('/dashboard')\r\n  }\r\n\r\n\r\n  const handleExport = async () => {\r\n    console.log('export data')\r\n  }\r\n\r\nuseEffect(() => {\r\n\r\n  var projects = []\r\n\r\n  async function fetchData() {\r\n\r\n  await firebase.firestore().collection(\"Projects\")\r\n      .get()\r\n      .then(function(querySnapshot) {\r\n          querySnapshot.forEach(function(doc) {\r\n              // doc.data() is never undefined for query doc snapshots\r\n              //console.log(doc.id, \" => \", doc.data());\r\n              projects.push(doc.data())\r\n          });\r\n      })\r\n      .catch(function(error) {\r\n          console.log(\"Error getting documents: \", error);\r\n      });\r\n\r\n\r\n  //console.log('new fetch', projects)\r\n  setData(projects)\r\n}\r\n\r\n  fetchData()\r\n\r\n\r\n},[])\r\n\r\nconsole.log(data)\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n\r\n      <AppBar position=\"static\">\r\n        <Toolbar className={classes.agencement}>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            <img src={logo} alt=\"LOGO\"/>\r\n          </Typography>\r\n\r\n\r\n<Hidden smDown>\r\n          <div className={classes.meteo}>{\r\n\r\n            meteo?.length >0 ?\r\n\r\n            meteo.map(item =>\r\n              <>\r\n              <div className={classes.gridItem}>\r\n                        <p className={classes.truc}>{item.city== 'Donji grad' ? 'Zagreb' : item.city}</p>\r\n                        <p  className={classes.truc}>{item.temp} °C</p>\r\n                        <p className={classes.truc}>{item.wind} m/s</p>\r\n                        <img\r\n                            src={`http://openweathermap.org/img/wn/${item.weather}@2x.png`}\r\n                              alt={item.weather}\r\n                              style={{width: 50}}\r\n                              />\r\n              </div>\r\n              </>\r\n            )\r\n\r\n\r\n\r\n\r\n            : 'no'\r\n\r\n\r\n\r\n\r\n          }</div>\r\n</Hidden>\r\n\r\n          {currentUser && (\r\n            <div>\r\n              <IconButton\r\n                aria-label=\"account of current user\"\r\n                aria-controls=\"menu-appbar\"\r\n                aria-haspopup=\"true\"\r\n                onClick={handleMenu}\r\n                color=\"inherit\"\r\n              >\r\n                <AccountCircle />\r\n              </IconButton>\r\n              <Menu\r\n                id=\"menu-appbar\"\r\n                anchorEl={anchorEl}\r\n                anchorOrigin={{\r\n                  vertical: 'top',\r\n                  horizontal: 'right',\r\n                }}\r\n                keepMounted\r\n                transformOrigin={{\r\n                  vertical: 'top',\r\n                  horizontal: 'right',\r\n                }}\r\n                open={open}\r\n                onClose={handleClose}\r\n              >\r\n\r\n                <CSVLink\r\n                    data={data}\r\n                    style={{\r\n                      textDecoration: 'none',\r\n                      color: 'black',\r\n                      margin: '10px',\r\n                      textAlign: 'left',\r\n                      fontFamily: \"Roboto, Helvetica Arial, sans-serif\"\r\n                    }}\r\n                    >Download data</CSVLink>\r\n                <MenuItem onClick={handleDashboard}>Dashboard</MenuItem>\r\n                <MenuItem onClick={handleLogOut}>Log Out</MenuItem>\r\n\r\n              </Menu>\r\n            </div>\r\n          )}\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","D:\\ReactProject\\BETA\\forza\\src\\firebase.js",[],"D:\\ReactProject\\BETA\\forza\\src\\Context\\AuthContext.js",["116","117"],"import React, {useContext, useState, useEffect} from 'react'\r\nimport {auth} from '../firebase.js'\r\n\r\nimport firebase from '../firebase.js'\r\n\r\n\r\nconst AuthContext = React.createContext()\r\n\r\nexport function useAuth(){\r\n  return useContext(AuthContext)\r\n}\r\n\r\n\r\n\r\nexport  function AuthProvider({children}){\r\n\r\nconst [currentUser, setCurrentUser] = useState()\r\nconst [loading, setLoading] = useState(true)\r\n\r\n\r\nfunction signup(email, password) {\r\n  return auth.createUserWithEmailAndPassword(email, password)\r\n}\r\n\r\n\r\nfunction login(email, password){\r\n    return auth.signInWithEmailAndPassword(email, password)\r\n}\r\n\r\nfunction updateUserData(user, name){\r\n\r\nconsole.log(user)\r\n\r\n    console.log('currentUser dans updateUser', user)\r\n\r\n      user.updateProfile({\r\n            displayName: \"Jane Q. User\"\r\n            })\r\n            .then(function() {\r\n              // Update successful.\r\n              //return currentUser.displayName\r\n              console.log('Username updated')\r\n\r\n            })\r\n            .catch(function(error) {\r\n              // An error happened.\r\n              console.log('error update Username: ', error)\r\n            });\r\n\r\n}\r\n\r\nfunction logout(){\r\n  return auth.signOut()\r\n}\r\n\r\nfunction resetPassword(email){\r\n  return auth.sendPasswordResetEmail(email)\r\n}\r\n\r\nfunction updateEmail(email){\r\n  return currentUser.updateEmail(email)\r\n}\r\n\r\nfunction updatePassword(password){\r\n  return currentUser.updatePassword(password)\r\n}\r\n\r\nfunction changeStatus(){\r\n  return auth.onAuthStateChanged(user => {return user})\r\n}\r\n\r\nfunction updateUsername(name){\r\n  //console.log('Firebase function', name)\r\n\r\n  currentUser.updateProfile({\r\n  displayName: name\r\n  //photoURL: \"https://example.com/jane-q-user/profile.jpg\"\r\n}).then(function() {\r\n  // Profile updated successfully!\r\n  // \"Jane Q. User\"\r\n  var displayName = currentUser.displayName;\r\n  console.log('The username has been properly updated!')\r\n  // \"https://example.com/jane-q-user/profile.jpg\"\r\n  //var photoURL = user.photoURL;\r\n}, function(error) {\r\n  // An error happened.\r\n  console.log('error in the username update - ', error )\r\n});\r\n\r\n\r\n}\r\n\r\nfunction updateCountry(id){\r\n\r\n  currentUser.updateProfile({\r\n  //phoneNumber: id\r\n  photoURL: id\r\n}).then(function() {\r\n  // Profile updated successfully!\r\n  // \"Jane Q. User\"\r\n  //var newCountryId = currentUser.phoneNumber;\r\n  console.log('The country has been properly updated! ', id)\r\n  // \"https://example.com/jane-q-user/profile.jpg\"\r\n  //var photoURL = user.photoURL;\r\n}, function(error) {\r\n  // An error happened.\r\n  console.log('error in the country update - ')\r\n});\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\nuseEffect(()=>{\r\n\r\n  const unsubscribe = auth.onAuthStateChanged(user =>{\r\n\r\n    setCurrentUser(user)\r\n    setLoading(false)\r\n  })\r\n\r\nreturn unsubscribe\r\n\r\n}, [])\r\n\r\n\r\nconst value = {\r\n  currentUser,\r\n  signup,\r\n  login,\r\n  logout,\r\n  resetPassword,\r\n  updateEmail,\r\n  updatePassword,\r\n  updateUserData,\r\n  changeStatus,\r\n  updateUsername,\r\n  updateCountry\r\n}\r\n\r\n  return (\r\n\r\n\r\n<AuthContext.Provider value={value}>\r\n{!loading && children}\r\n</AuthContext.Provider>\r\n\r\n  )\r\n}\r\n","D:\\ReactProject\\BETA\\forza\\src\\Components\\ForgotPassword.js",[],"D:\\ReactProject\\BETA\\forza\\src\\Components\\Filter.js",["118"],"import React from 'react'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PrioritySelect from '../Assets/Select'\r\nimport CountrySelect from '../Assets/Select'\r\nimport BladeSelect from '../Assets/Select'\r\nimport TowerSelect from '../Assets/Select'\r\nimport GenerationSelect from '../Assets/Select'\r\nimport TMSelect from '../Assets/Select'\r\nimport SMSelect from '../Assets/Select'\r\nimport RoadSurveySelect from '../Assets/Select'\r\nimport LogBudgetSelect from '../Assets/Select'\r\nimport GateSelect from '../Assets/Select'\r\nimport StatusSelect from '../Assets/Select'\r\nimport Button from '../Assets/Button'\r\n\r\nimport {\r\n  countries,\r\n  dataQtty,\r\n  dataGeneration,\r\n  dataBlades,\r\n  dataTowers,\r\n  dataTM,\r\n  dataSM,\r\n  dataPriorities,\r\n  dataRoadSurvey,\r\n  dataLOGBudget,\r\n  dataGate,\r\n  tenderStatus\r\n} from '../data.js'\r\n\r\n\r\nexport default function Filter({\r\n  //Priority\r\n  valueFilterPriority,\r\n  onChangeFilterPriority,\r\n  //Blades\r\n  valueFilterBlade,\r\n  onChangeFilterBlade,\r\n  //TOWER\r\n  valueFilterTower,\r\n  onChangeFilterTower,\r\n  //GENERATION\r\n  valueFilterGeneration,\r\n  onChangeFilterGeneration,\r\n  //TM\r\n  valueFilterTM,\r\n  onChangeFilterTM,\r\n  //SM\r\n  valueFilterSM,\r\n  onChangeFilterSM,\r\n  //Road Survey\r\n  valueFilterRoadSurvey,\r\n  onChangeFilterRoadSurvey,\r\n  //LOG Budget\r\n  valueFilterLOGBudget,\r\n  onChangeFilterLOGBudget,\r\n  //Gate\r\n  valueFilterGate,\r\n  onChangeFilterGate,\r\n  //Status\r\n  valueFilterStatus,\r\n  onChangeFilterStatus,\r\n  //projects\r\n  valueFilterProject,\r\n  onChangeFilterProject,\r\n  //client\r\n  valueFilterClient,\r\n  onChangeFilterClient,\r\n  //country\r\n  valueFilterCountry,\r\n  onChangeFilterCountry,\r\n  //Click pour reset\r\n  onClickResetFilter\r\n\r\n}){\r\n\r\n  const styles = {\r\n    filter: {\r\n      //backgroundColor: 'red',\r\n      width: '100%',\r\n      display: 'flex',\r\n      flexWrap: 'wrap'\r\n    },\r\n    layout: {\r\n\r\n    }\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n    <div style={styles.filter}>\r\n\r\n\r\n          <div>\r\n              <TextField\r\n                label='Filter Project'\r\n                value={valueFilterProject}\r\n                onChange={onChangeFilterProject}\r\n                variant='outlined'\r\n              />\r\n          </div>\r\n\r\n          <div>\r\n\r\n              <CountrySelect\r\n                  label='Filter Country'\r\n                  value={valueFilterCountry}\r\n                  onChange={onChangeFilterCountry}\r\n                  data={countries}\r\n              />\r\n          </div>\r\n\r\n          <div>\r\n\r\n              <BladeSelect\r\n                  label='Filter Blade'\r\n                  value={valueFilterBlade}\r\n                  onChange={onChangeFilterBlade}\r\n                  data={dataBlades}\r\n              />\r\n          </div>\r\n          <div>\r\n\r\n              <TowerSelect\r\n                  label='Filter Tower'\r\n                  value={valueFilterTower}\r\n                  onChange={onChangeFilterTower}\r\n                  data={dataTowers}\r\n              />\r\n          </div>\r\n          <div>\r\n\r\n              <GenerationSelect\r\n                  label='Filter Generation'\r\n                  value={valueFilterGeneration}\r\n                  onChange={onChangeFilterGeneration}\r\n                  data={dataGeneration}\r\n              />\r\n          </div>\r\n          <div>\r\n              <TextField\r\n                label='Filter Client'\r\n                value={valueFilterClient}\r\n                onChange={onChangeFilterClient}\r\n                variant='outlined'\r\n              />\r\n          </div>\r\n          <div>\r\n\r\n              <PrioritySelect\r\n\r\n                  label='Filter Priority'\r\n                  value={valueFilterPriority}\r\n                  onChange={onChangeFilterPriority}\r\n                  data={dataPriorities}\r\n\r\n              />\r\n          </div>\r\n          <div>\r\n\r\n              <TMSelect\r\n\r\n                  label='Filter Tender Manager'\r\n                  value={valueFilterTM}\r\n                  onChange={onChangeFilterTM}\r\n                  data={dataTM}\r\n\r\n              />\r\n          </div>\r\n          <div>\r\n\r\n\r\n              <SMSelect\r\n\r\n                  label='Filter Sales Manager'\r\n                  value={valueFilterSM}\r\n                  onChange={onChangeFilterSM}\r\n                  data={dataSM}\r\n\r\n              />\r\n\r\n          </div>\r\n          <div>\r\n\r\n\r\n              <RoadSurveySelect\r\n\r\n                  label='Filter Road Survey'\r\n                  value={valueFilterRoadSurvey}\r\n                  onChange={onChangeFilterRoadSurvey}\r\n                  data={dataRoadSurvey}\r\n\r\n              />\r\n\r\n          </div>\r\n          <div>\r\n\r\n\r\n              <LogBudgetSelect\r\n\r\n                  label='Filter Log Budget'\r\n                  value={valueFilterLOGBudget}\r\n                  onChange={onChangeFilterLOGBudget}\r\n                  data={dataLOGBudget}\r\n\r\n              />\r\n\r\n          </div>\r\n          <div>\r\n\r\n\r\n              <GateSelect\r\n\r\n                  label='Filter Gate'\r\n                  value={valueFilterGate}\r\n                  onChange={onChangeFilterGate}\r\n                  data={dataGate}\r\n\r\n              />\r\n          </div>\r\n          <div>\r\n\r\n              <StatusSelect\r\n\r\n                  label='Filter Status'\r\n                  value={valueFilterStatus}\r\n                  onChange={onChangeFilterStatus}\r\n                  data={tenderStatus}\r\n\r\n              />\r\n\r\n          </div>\r\n\r\n    </div>\r\n\r\n    <Button\r\n      onClick={onClickResetFilter}\r\n      label='Reset Filter'\r\n\r\n    />\r\n\r\n\r\n    </>\r\n  )\r\n\r\n}\r\n","D:\\ReactProject\\BETA\\forza\\src\\Components\\List.js",["119"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { lighten, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport moment from 'moment'\r\nimport firebase from '../firebase.js'\r\n\r\n\r\n\r\n\r\n\r\n\r\n//CREATION DES DONNEES\r\n/*\r\nfunction createData(name, qtty_1, blade_1, tower_1, generation, client, priority, country, order_intake, kickoff, TM, SM, RS, logBudget, gateStatus, comments, status) {\r\n  return { name, qtty_1, blade_1, tower_1, generation, client, priority, country, order_intake, kickoff, TM, SM, RS, logBudget, gateStatus, comments, status};\r\n}\r\n*/\r\n\r\n/*\r\nconst rows = [\r\n  createData('Craco', 10, 'N131', 'TS114', 'Delta', 'Margherita', 'High', 'Italy', moment('2020/11/30').format('X'), moment('2019/10/03').format('X'), 'H. Del Fabbro', 'G. Celliberti', 'yes', 'yes', 'Gate4', 'handover done fdsfdsf fdsgf gfdggg gg g sf fdsgf gfdggg gg g sf fdsgf gfdggg gg g sf fdsgf gfdggg gg g sf fdsgf gfdggg gg g sf fdsgf gfdggg gg g sf fdsgf gfdggg gg g sf fdsgf gfdggg gg g sf fdsgf gfdggg gg g sf fdsgf gfdggg gg g sf fdsgf gfdggg gg g sf fdsgf gfdggg gg g sf fdsgf gfdggg gg g sf fdsgf gfdggg gg g sf fdsgf gfdggg gg g sf fdsgf gfdggg gg g ', 'closed' ),\r\n  createData('San Carlo', 2, 'N131', 'TS84', 'Delta', 'Margherita', 'Low', 'Italy', moment('2020/03/01').format('X'), moment('2020/05/05').format('X'), 'H. Del Fabbro', 'G. Celliberti', 'yes', 'no', 'Gate3', 'handover done', 'open'),\r\n  createData('Kella', 9, 'N149', 'TS105', 'Delta 4000', 'Motor Oil Hellas', 'Medium','Greece', moment('2020/12/15').format('X'), moment('2018/02/08').format('X'), 'M. Seduk', 'P. Lappas', 'no', 'yes', 'Gate3', 'handover done', 'open')\r\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\r\n  createData('Gingerbread', 356, 16.0, 49, 3.9),\r\n  createData('Honeycomb', 408, 3.2, 87, 6.5),\r\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\r\n  createData('Jelly Bean', 375, 0.0, 94, 0.0),\r\n  createData('KitKat', 518, 26.0, 65, 7.0),\r\n  createData('Lollipop', 392, 0.2, 98, 0.0),\r\n  createData('Marshmallow', 318, 0, 81, 2.0),\r\n  createData('Nougat', 360, 19.0, 9, 37.0),\r\n  createData('Oreo', 437, 18.0, 63, 4.0)\r\n];*/\r\n\r\n\r\n//FONCTION POUR LE TRI EN GENERAL\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  //console.log(orderBy)\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\n//TITRE DES COLONNES\r\n\r\nconst headCells = [\r\n  { id: 'name', numeric: false, disablePadding: true, label: 'Name' },\r\n  { id: 'qtty_1', numeric: true, disablePadding: false, label: 'Qtty (1)' },\r\n  { id: 'blade_1', numeric: true, disablePadding: false, label: 'Blade (1)' },\r\n  { id: 'tower_1', numeric: true, disablePadding: false, label: 'Tower (1)' },\r\n  { id: 'generation', numeric: true, disablePadding: false, label: 'Generation ' },\r\n  { id: 'client', numeric: true, disablePadding: false, label: 'Client' },\r\n  { id: 'priority', numeric: true, disablePadding: false, label: 'Priority' },\r\n  { id: 'country', numeric: true, disablePadding: false, label: 'Country' },\r\n  { id: 'order_intake', numeric: true, disablePadding: false, label: 'Order Intake' },\r\n  { id: 'kickoff', numeric: true, disablePadding: false, label: 'Kick-Off' },\r\n  { id: 'TM', numeric: true, disablePadding: false, label: 'Tender Manager' },\r\n  { id: 'SM', numeric: true, disablePadding: false, label: 'Sales Manager' },\r\n  { id: 'RS', numeric: true, disablePadding: false, label: 'Road Survey' },\r\n  { id: 'logBudget', numeric: true, disablePadding: false, label: 'LOG Budget?' },\r\n  { id: 'gateStatus', numeric: true, disablePadding: false, label: 'Gate' },\r\n  { id: 'comments', numeric: true, disablePadding: false, label: 'Comments' },\r\n  { id: 'status', numeric: true, disablePadding: false, label: 'Status' }\r\n\r\n];\r\n\r\n//RENDU DE LA COLONNE DE TITRE\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    //console.log('colonne ', property, ' clicked')\r\n    //console.log(event, property)\r\n    onRequestSort(event, property);\r\n\r\n  };\r\n\r\n  const styles ={\r\n    titre:{\r\n      fontWeight: 'bold'\r\n    }\r\n  }\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n\r\n\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? 'right' : 'left'}\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n              style={styles.titre}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n\r\n\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\n//BAR AU DESSUS DU TABLEAU PRINCIPALE (incluant logique)\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const classes = useToolbarStyles();\r\n  const { numSelected, onClickSelection, onClickFilter, children } = props;\r\n\r\n  return (\r\n    <>\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}\r\n    >\r\n      {numSelected > 0 ? (\r\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\r\n          Tender Project Review\r\n        </Typography>\r\n      )}\r\n\r\n      {numSelected > 0 ? (\r\n        <Tooltip title=\"Delete\">\r\n          <IconButton aria-label=\"delete\">\r\n            <DeleteIcon onClick={onClickSelection} />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ) : (\r\n        <Tooltip title=\"Filter list\">\r\n          <IconButton aria-label=\"filter list\">\r\n            <FilterListIcon onClick={onClickFilter} />\r\n          </IconButton>\r\n        </Tooltip>\r\n      )}\r\n\r\n    </Toolbar>\r\n\r\n    {children}\r\n    </>\r\n  );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n  survolLigne: {\r\n    backgroundColor: 'white'\r\n  },\r\n  survolItem: {\r\n    //backgroundColor: 'red',\r\n    '&:hover': {\r\n      background: \"#FFD29A\",\r\n      borderRadius: '15px'\r\n    }\r\n  },\r\n}));\r\n\r\n//FONCTION PRINCIPALE\r\n\r\nexport default function EnhancedTable({\r\n\r\n  tableau,\r\n  onClickQtty,\r\n  onClickBlade,\r\n  onClickTower,\r\n  onClickGeneration,\r\n  onClickPriority,\r\n  onClickCountry,\r\n  onClickTM,\r\n  onClickSM,\r\n  onClickRoad,\r\n  onClickLOGBudget,\r\n  onClickGate,\r\n  onClickStatus,\r\n  onClickClient,\r\n  onClickComments,\r\n  onClickKO,\r\n  onClickOI,\r\n  onClickFilter,\r\n  children\r\n\r\n}) {\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState('asc');\r\n  const [orderBy, setOrderBy] = React.useState('name');\r\n  const [selected, setSelected] = React.useState([]);\r\n  const [page, setPage] = React.useState(0);\r\n  const [dense, setDense] = React.useState(false);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n\r\n\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = tableau.map((n) => n.project);\r\n      setSelected(newSelecteds);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (event, name) => {\r\n\r\n//console.log('event', event)\r\n//console.log('name', name)\r\n\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1),\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked);\r\n  };\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, tableau.length - page * rowsPerPage);\r\n\r\n\r\n  const onClickSelection = () => {\r\n    //console.log('dans la fonction', selected)\r\n    //ici on supprime les projets selectionnés\r\n\r\n    selected.forEach(item => {\r\n\r\n\r\n\r\n      console.log('on va supprimer ', item)\r\n\r\n      var myQuery = firebase.firestore().collection(\"Projects\").where(\"project\", \"==\", item)\r\n\r\n      myQuery.get().then(function(querySnapshot) {\r\n        querySnapshot.forEach(function(doc) {\r\n          doc.ref.delete();\r\n\r\n\r\n\r\n    setSelected([])\r\n  });\r\n});\r\n\r\n\r\n\r\n    })\r\n\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <EnhancedTableToolbar numSelected={selected.length} onClickSelection={onClickSelection} onClickFilter={onClickFilter} children={children} />\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"tableTitle\"\r\n            size={dense ? 'small' : 'medium'}\r\n            aria-label=\"enhanced table\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={tableau.length}\r\n            />\r\n            <TableBody>\r\n              {stableSort(tableau, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  const isItemSelected = isSelected(row.project);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      //onClick={(event) => handleClick(event, row.project)}\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={index}\r\n                      selected={isItemSelected}\r\n                      className={classes.survolLigne}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          onClick={(event) => handleClick(event, row.project)}\r\n                          checked={isItemSelected}\r\n                          inputProps={{ 'aria-labelledby': labelId }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n                        {row.project}\r\n                      </TableCell>\r\n                      <TableCell align=\"right\" onClick={()=>onClickQtty(row.project, row.quantity)} hover className={classes.survolItem}>{row.quantity}</TableCell>\r\n                      <TableCell align=\"right\" onClick={()=>onClickBlade(row.project, row.blade)} hover className={classes.survolItem}>{row.blade}</TableCell>\r\n                      <TableCell align=\"right\" onClick={()=>onClickTower(row.project, row.tower)} hover className={classes.survolItem}>{row.tower}</TableCell>\r\n                      <TableCell align=\"right\" onClick={()=>onClickGeneration(row.project, row.generation)} hover className={classes.survolItem}>{row.generation}</TableCell>\r\n\r\n                      <TableCell align=\"right\" onClick={()=>onClickClient(row.project, row.client)} hover className={classes.survolItem}>{row.client}</TableCell>\r\n\r\n                      <TableCell align=\"right\"  onClick={()=>onClickPriority(row.project, row.priority)} hover className={classes.survolItem} >{row.priority}</TableCell>\r\n                      <TableCell align=\"right\"  onClick={()=>onClickCountry(row.project, row.country)} hover className={classes.survolItem} >{row.country}</TableCell>\r\n                      <TableCell align=\"right\" onClick={()=>onClickOI(row.project,row.dateOI)} hover className={classes.survolItem}>{moment(row.dateOI).format(\"DD/MM/yyyy\")}</TableCell>\r\n\r\n                      <TableCell align=\"right\" onClick={()=>onClickKO(row.project,row.dateKO)} hover className={classes.survolItem}>{moment(row.dateKO).format(\"DD/MM/yyyy\")}</TableCell>\r\n                      <TableCell align=\"right\" onClick={()=>onClickTM(row.project, row.tm)} hover className={classes.survolItem}>{row.tm}</TableCell>\r\n                      <TableCell align=\"right\" onClick={()=>onClickSM(row.project, row.sm)} hover className={classes.survolItem}>{row.sm}</TableCell>\r\n                      <TableCell align=\"right\" onClick={()=>onClickRoad(row.project, row.roadSurvey)} hover className={classes.survolItem}>{row.roadSurvey}</TableCell>\r\n                      <TableCell align=\"right\" onClick={()=>onClickLOGBudget(row.project, row.logBudget)} hover className={classes.survolItem}>{row.logBudget}</TableCell>\r\n                      <TableCell align=\"right\" onClick={()=>onClickGate(row.project, row.gate)} hover className={classes.survolItem}>{row.gate}</TableCell>\r\n                      <TableCell align=\"right\" onClick={()=>onClickComments(row.project, row.comments)} style={{width: 400}} hover className={classes.survolItem}>{row.comments}</TableCell>\r\n                      <TableCell align=\"right\" onClick={()=>onClickStatus(row.project, row.status)} hover className={classes.survolItem}>{row.status}</TableCell>\r\n\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              {emptyRows > 0 && (\r\n                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={tableau.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n      <FormControlLabel\r\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n        label=\"Dense padding\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","D:\\ReactProject\\BETA\\forza\\src\\Assets\\Button.js",[],"D:\\ReactProject\\BETA\\forza\\src\\Assets\\Dialog.js",[],"D:\\ReactProject\\BETA\\forza\\src\\Assets\\Select.js",["120"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\n//import {countries} from '../data.js'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 150,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  selectAdjust: {\r\n    width: 220\r\n  }\r\n}));\r\n\r\nexport default function SimpleSelect({\r\n    label,\r\n    value,\r\n    onChange,\r\n    data\r\n\r\n}) {\r\n\r\n\r\n  const classes = useStyles();\r\n/*  const [age, setAge] = React.useState('');\r\n\r\n  const handleChange = (event) => {\r\n    setAge(event.target.value);\r\n  };\r\n\r\n*/\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n\r\n      <FormControl variant=\"outlined\" className={classes.formControl}>\r\n        <InputLabel id=\"demo-simple-select-outlined-label\">{label}</InputLabel>\r\n        <Select\r\n          labelId=\"demo-simple-select-outlined-label\"\r\n          id=\"demo-simple-select-outlined\"\r\n          value={value}\r\n          onChange={onChange}\r\n          label={label}\r\n          className={classes.selectAdjust}\r\n        >\r\n\r\n{data.map(item =>\r\n          <MenuItem value={item.name} key={item.id}>{item.name}</MenuItem>\r\n)\r\n}\r\n\r\n        </Select>\r\n      </FormControl>\r\n\r\n    </div>\r\n  );\r\n}\r\n","D:\\ReactProject\\BETA\\forza\\src\\data.js",[],"D:\\ReactProject\\BETA\\forza\\src\\Assets\\DatePicker.js",["121"],"import 'date-fns';\r\nimport React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardTimePicker,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\n\r\nexport default function MaterialUIPickers(props) {\r\n\r\n  const { labelDatePicker, valueDatePicker, onChangeDatePicker} = props\r\n\r\n  // The first commit of Material-UI\r\n\r\n  /*\r\n  const [selectedDate, setSelectedDate] = React.useState(new Date('2014-08-18T21:11:54'));\r\n\r\n  const handleDateChange = (date) => {\r\n    setSelectedDate(date);\r\n  };\r\n*/\r\n\r\n\r\n  return (\r\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n      <Grid container justify=\"space-around\">\r\n\r\n        <KeyboardDatePicker\r\n          margin=\"normal\"\r\n          id=\"date-picker-dialog\"\r\n          label={labelDatePicker}\r\n          format=\"dd/MM/yyyy\"\r\n          value={valueDatePicker}\r\n          onChange={onChangeDatePicker}\r\n          KeyboardButtonProps={{\r\n            'aria-label': 'change date',\r\n          }}\r\n        />\r\n\r\n      </Grid>\r\n    </MuiPickersUtilsProvider>\r\n  );\r\n}\r\n","D:\\ReactProject\\BETA\\forza\\src\\Assets\\SmallAlert.js",[],"D:\\ReactProject\\BETA\\forza\\src\\functions.js",["122","123","124"],"export function findWithAttr(array, attr, value) {\r\n  //console.log('array', array)\r\n  //console.log('attr', attr)\r\n  //console.log('value', value)\r\n\r\n    for(var i = 0; i < array.length; i += 1) {\r\n        if(array[i][attr] === value) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n\r\nexport function filterArray(array, criteria){\r\n\r\n  var tableauFiltre = array\r\n  //console.log('filtered Array', tableauFiltre)\r\n  //console.log('longueur du tableau', tableauFiltre.length)\r\n\r\n  var tableauTemp\r\n  var counter = 0\r\n  //var tableauTemp =[]\r\n\r\n  Object.keys(criteria).forEach(key => {\r\n\r\n    //console.log('counter', counter)\r\n    //console.log('valeur init tableauTemp', tableauTemp)\r\n\r\n    if (criteria[key] !== '***' && criteria[key] !== '') {\r\n\r\n                  if (tableauTemp?.length >0){\r\n                  tableauTemp = tableauTemp.filter(item => item[key] == criteria[key])\r\n                  console.log('filtre A1')\r\n                  }\r\n\r\n                  if (!tableauTemp){\r\n                  tableauTemp = tableauFiltre.filter(item => item[key] == criteria[key])\r\n                  //counter = counter + 1\r\n                  //console.log('initiation A')\r\n                  console.log('filtre A2')\r\n                  }\r\n\r\n                  //console.log('tableau avec un filtre A ', tableauTemp)\r\n\r\n    } else {\r\n                  //console.log('tableauTemp dans le else', tableauTemp)\r\n                  if (tableauTemp?.length >0){\r\n                    //var tableauTemp = tableauFiltre\r\n                    console.log('on garde le même tableau')\r\n                  } else {\r\n                    tableauTemp = tableauFiltre\r\n                    //console.log('pour debug')\r\n                  }\r\n\r\n\r\n                  //console.log('tableau avec un filtre B', tableauTemp)\r\n\r\n\r\n    }\r\n\r\n  })\r\n\r\n  //console.log('resultat', tableauTemp? tableauTemp : array)\r\n\r\n  return tableauTemp? tableauTemp : array\r\n\r\n}\r\n","D:\\ReactProject\\BETA\\forza\\src\\Assets\\DialogForChange\\DialogQtty.js",["125"],"import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nexport default function FormDialog({open, handleClose, titleDialog, dialogText, handleValidate, labelValidate, children}) {\r\n\r\n/*\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n*/\r\n  return (\r\n    <div>\r\n      <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle id=\"form-dialog-title\">{titleDialog}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            {dialogText}\r\n          </DialogContentText>\r\n            {children}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleValidate} color=\"primary\">\r\n            {labelValidate}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","D:\\ReactProject\\BETA\\forza\\src\\Assets\\PrivateRoute.js",[],"D:\\ReactProject\\BETA\\forza\\src\\Components\\Dashboard.js",["126","127","128","129","130","131","132","133","134","135","136","137","138","139"],{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","severity":1,"message":"145","line":24,"column":8,"nodeType":"146","messageId":"147","endLine":24,"endColumn":18},{"ruleId":"144","severity":1,"message":"148","line":322,"column":7,"nodeType":"146","messageId":"147","endLine":322,"endColumn":24},{"ruleId":"144","severity":1,"message":"149","line":1209,"column":5,"nodeType":"146","messageId":"147","endLine":1209,"endColumn":15},{"ruleId":"150","severity":1,"message":"151","line":1271,"column":111,"nodeType":"146","messageId":"152","endLine":1271,"endColumn":115},{"ruleId":"144","severity":1,"message":"153","line":7,"column":8,"nodeType":"146","messageId":"147","endLine":7,"endColumn":16},{"ruleId":"144","severity":1,"message":"154","line":9,"column":8,"nodeType":"146","messageId":"147","endLine":9,"endColumn":14},{"ruleId":"144","severity":1,"message":"155","line":10,"column":8,"nodeType":"146","messageId":"147","endLine":10,"endColumn":24},{"ruleId":"144","severity":1,"message":"156","line":11,"column":8,"nodeType":"146","messageId":"147","endLine":11,"endColumn":17},{"ruleId":"144","severity":1,"message":"157","line":18,"column":19,"nodeType":"146","messageId":"147","endLine":18,"endColumn":30},{"ruleId":"144","severity":1,"message":"158","line":66,"column":10,"nodeType":"146","messageId":"147","endLine":66,"endColumn":14},{"ruleId":"144","severity":1,"message":"159","line":70,"column":10,"nodeType":"146","messageId":"147","endLine":70,"endColumn":15},{"ruleId":"144","severity":1,"message":"160","line":75,"column":9,"nodeType":"146","messageId":"147","endLine":75,"endColumn":21},{"ruleId":"144","severity":1,"message":"161","line":97,"column":9,"nodeType":"146","messageId":"147","endLine":97,"endColumn":21},{"ruleId":"162","severity":1,"message":"163","line":150,"column":63,"nodeType":"164","messageId":"165","endLine":150,"endColumn":65},{"ruleId":"144","severity":1,"message":"166","line":4,"column":8,"nodeType":"146","messageId":"147","endLine":4,"endColumn":16},{"ruleId":"144","severity":1,"message":"167","line":81,"column":7,"nodeType":"146","messageId":"147","endLine":81,"endColumn":18},{"ruleId":"144","severity":1,"message":"168","line":18,"column":3,"nodeType":"146","messageId":"147","endLine":18,"endColumn":11},{"ruleId":"144","severity":1,"message":"169","line":23,"column":8,"nodeType":"146","messageId":"147","endLine":23,"endColumn":14},{"ruleId":"144","severity":1,"message":"170","line":5,"column":8,"nodeType":"146","messageId":"147","endLine":5,"endColumn":22},{"ruleId":"144","severity":1,"message":"171","line":7,"column":3,"nodeType":"146","messageId":"147","endLine":7,"endColumn":21},{"ruleId":"144","severity":1,"message":"172","line":21,"column":7,"nodeType":"146","messageId":"147","endLine":21,"endColumn":14},{"ruleId":"162","severity":1,"message":"163","line":32,"column":70,"nodeType":"164","messageId":"165","endLine":32,"endColumn":72},{"ruleId":"162","severity":1,"message":"163","line":37,"column":72,"nodeType":"164","messageId":"165","endLine":37,"endColumn":74},{"ruleId":"144","severity":1,"message":"173","line":3,"column":8,"nodeType":"146","messageId":"147","endLine":3,"endColumn":17},{"ruleId":"144","severity":1,"message":"174","line":3,"column":9,"nodeType":"146","messageId":"147","endLine":3,"endColumn":18},{"ruleId":"144","severity":1,"message":"175","line":3,"column":20,"nodeType":"146","messageId":"147","endLine":3,"endColumn":24},{"ruleId":"144","severity":1,"message":"176","line":3,"column":79,"nodeType":"146","messageId":"147","endLine":3,"endColumn":85},{"ruleId":"162","severity":1,"message":"163","line":98,"column":56,"nodeType":"164","messageId":"165","endLine":98,"endColumn":58},{"ruleId":"162","severity":1,"message":"163","line":118,"column":51,"nodeType":"164","messageId":"165","endLine":118,"endColumn":53},{"ruleId":"162","severity":1,"message":"163","line":122,"column":51,"nodeType":"164","messageId":"165","endLine":122,"endColumn":53},{"ruleId":"162","severity":1,"message":"163","line":141,"column":51,"nodeType":"164","messageId":"165","endLine":141,"endColumn":53},{"ruleId":"162","severity":1,"message":"163","line":145,"column":51,"nodeType":"164","messageId":"165","endLine":145,"endColumn":53},{"ruleId":"162","severity":1,"message":"163","line":165,"column":54,"nodeType":"164","messageId":"165","endLine":165,"endColumn":56},{"ruleId":"162","severity":1,"message":"163","line":169,"column":54,"nodeType":"164","messageId":"165","endLine":169,"endColumn":56},{"ruleId":"162","severity":1,"message":"163","line":189,"column":54,"nodeType":"164","messageId":"165","endLine":189,"endColumn":56},{"ruleId":"162","severity":1,"message":"163","line":193,"column":54,"nodeType":"164","messageId":"165","endLine":193,"endColumn":56},{"ruleId":"162","severity":1,"message":"163","line":213,"column":57,"nodeType":"164","messageId":"165","endLine":213,"endColumn":59},{"ruleId":"162","severity":1,"message":"163","line":217,"column":57,"nodeType":"164","messageId":"165","endLine":217,"endColumn":59},"no-native-reassign",["177"],"no-negated-in-lhs",["178"],"no-unused-vars","'SmallAlert' is defined but never used.","Identifier","unusedVar","'onClickValidation' is assigned a value but never used.","'newProject' is assigned a value but never used.","no-redeclare","'temp' is already defined.","redeclared","'MenuIcon' is defined but never used.","'Switch' is defined but never used.","'FormControlLabel' is defined but never used.","'FormGroup' is defined but never used.","'CSVDownload' is defined but never used.","'auth' is assigned a value but never used.","'login' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'handleExport' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'firebase' is defined but never used.","'displayName' is assigned a value but never used.","'dataQtty' is defined but never used.","'Hidden' is defined but never used.","'FormHelperText' is defined but never used.","'KeyboardTimePicker' is defined but never used.","'counter' is assigned a value but never used.","'TextField' is defined but never used.","'LineChart' is defined but never used.","'Line' is defined but never used.","'Legend' is defined but never used.","no-global-assign","no-unsafe-negation"]